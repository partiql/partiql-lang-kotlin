
// TODO:  locate and remove unused types.

// TODO: follow up with Ion team on how ISL will be versioned. Based on that outcome, may need to make changes to the ISL domain

(define ion_schema_model
    (domain 
        // <SCHEMA> ::= <TYPE_DEFINITION>...
        //           | <HEADER> <TYPE_DEFINITION>... <FOOTER>
        (product schema statements::(* schema_statement 0))

        (product open_field name::symbol value::ion)
        (product open_field_list contents::(* open_field 0))

        (sum schema_statement
            (header_statement open_content::open_field_list imports::(? import_list))
            (footer_statement open_content::open_field_list)
            (type_statement type_def::type_definition)
            (content_statement value::ion))

        // <IMPORT> ::= <IMPORT_SCHEMA>
        //         | <IMPORT_TYPE>
        //         | <IMPORT_TYPE_ALIAS>
        // <IMPORT_SCHEMA>     ::= { id: <ID> }
        // <IMPORT_TYPE>       ::= { id: <ID>, type: <TYPE_NAME> }
        // <IMPORT_TYPE_ALIAS> ::= { id: <ID>, type: <TYPE_NAME>, as: <TYPE_ALIAS> }
        (product import id::symbol typeName::(? symbol) alias::(? symbol))
        (product import_list items::(* import 0))

        // <FOOTER> ::= schema_footer::{ }
        (product footer)

        // <TYPE_DEFINITION> ::= type::{ name: <TYPE_NAME>, <CONSTRAINT>... } | { <CONSTRAINT>... }
        (record type_definition
            (name (? symbol)) 
            // TODO: use a variadic record element when supported by PIG.
            (constraints constraint_list))


        // <ID> ::= <STRING> | <SYMBOL>
        // <TYPE_ALIAS> ::= <SYMBOL>
        // <TYPE_NAME> ::= <SYMBOL>
        // No PIG representation for the above 3 

        // <TYPE_REFERENCE> ::=        <TYPE_NAME>
        //                 | nullable::<TYPE_NAME>
        //                 |           <TYPE_ALIAS>
        //                 | nullable::<TYPE_ALIAS>
        //                 |           <TYPE_DEFINITION>
        //                 | nullable::<TYPE_DEFINITION>
        //                 |           <IMPORT_TYPE>
        //                 | nullable::<IMPORT_TYPE>
        (sum type_reference 
            (named_type name::symbol nullable::ion)                 // TODO: use `boolean` instead of `ion` here
            (inline_type type::type_definition nullable::ion)       // TODO: use `boolean` instead of `ion` here
            (imported_type id::symbol type::symbol nullable::ion alias::(? symbol)))  // TODO: use `boolean` instead of `ion` here

        // <NUMBER> ::= <DECIMAL> | <FLOAT> | <INT>
        // No PIG representation for the above

        // <RANGE_TYPE> ::= <DECIMAL> | <FLOAT> | <INT> | <NUMBER> | <TIMESTAMP_PRECISION_VALUE>
        // <RANGE<RANGE_TYPE>> ::= range::[ <RANGE_TYPE>, <RANGE_TYPE> ]
        //                     | range::[ min, <RANGE_TYPE> ]
        //                     | range::[ <RANGE_TYPE>, max ]
        //                     | range::[ min, max ]


        (sum number_extent
            (min)
            (max)
            (inclusive value::ion)  // TODO:  use `number` instead of `ion` here (https://github.com/partiql/partiql-ir-generator/issues/43)
            (exclusive value::ion)) // TODO:  use `number` instead of `ion` here (https://github.com/partiql/partiql-ir-generator/issues/43)

        (product number_range min::number_extent max::number_extent)

        (sum number_rule
            (equals_number value::ion) // TODO:  use `number` instead of `ion` here (https://github.com/partiql/partiql-ir-generator/issues/43)
            (equals_range range::number_range))

        // Add support for timestamp - https://github.com/partiql/partiql-ir-generator/issues/51
        (product ts_value_range min::ts_value_extent max::ts_value_extent)

        (sum ts_value_extent
            (min_ts_value)
            (max_ts_value)
            (inclusive_ts_value value::ion)
            (exclusive_ts_value value::ion))

        // <TIMESTAMP_PRECISION_VALUE> ::= year | month | day | minute | second | millisecond | microsecond | nanosecond
        (sum ts_precision_value
            (year)
            (month)
            (day)
            (minute)
            (second)
            (millisecond)
            (microsecond)
            (nanosecond))

        // tsp = timestamp precision
        (sum ts_precision_extent
            (min_tsp)
            (max_tsp)
            (inclusive_tsp precision::ts_precision_value)
            (exclusive_tsp precision::ts_precision_value))

        (product ts_precision_range min::ts_precision_extent max::ts_precision_extent)

        (sum ts_precision
            (equals_ts_precision_value value::ts_precision_value) // TODO:  use `number` instead of `ion` here (https://github.com/partiql/partiql-ir-generator/issues/43)
            (equals_ts_precision_range range::ts_precision_range))

        // can we put any of the grammar above any of the types below
        (sum optionality (required) (optional))
        (product annotation text::symbol optionality::(? optionality::optionality))
        (product annotation_list items::(* annotation 0))

        (product field name::symbol type::type_reference)

        (sum occurs_spec
            (occurs_rule rule::number_rule)
            (occurs_optional)
            (occurs_required))

        (sum valid_values_spec
            (one_of_valid_values values::(* ion 0))
            (range_of_valid_values range::values_range))

        (sum values_range
            (num_range range::number_range)
            (timestamp_range range::ts_value_range))

        // <CONSTRAINT> ::= <ALL_OF>
        //             | <ANNOTATIONS>
        //             | <ANY_OF>
        //             | <BYTE_LENGTH>
        //             | <CODEPOINT_LENGTH>
        //             | <CONTAINER_LENGTH>
        //             | <CONTAINS>
        //             | <CONTENT>
        //             | <ELEMENT>
        //             | <FIELDS>
        //             | <NOT>
        //             | <OCCURS>
        //             | <ONE_OF>
        //             | <ORDERED_ELEMENTS>
        //             | <PRECISION>
        //             | <REGEX>
        //             | <SCALE>
        //             | <TIMESTAMP_OFFSET>
        //             | <TIMESTAMP_PRECISION>
        //             | <TYPE>
        //             | <VALID_VALUES>
        (sum constraint
            // <ALL_OF> ::= all_of: [ <TYPE_REFERENCE>... ]
            (all_of types::(* type_reference 0))

            // NOTE: this is in the grammar of the specification but doesn't appear to be implemented.
            // <ANNOTATION> ::= <SYMBOL> | required::<SYMBOL> | optional::<SYMBOL>
            //             //(annotation rules::(* annotation_rule 0))

            // <ANNOTATIONS> ::= annotations: [ <ANNOTATION>... ]
            //                 | annotations: required::[ <ANNOTATION>... ]
            //                 | annotations: ordered::[ <ANNOTATION>... ]
            (annotations
                is_ordered::ion // TODO: use boolean
                annos::annotation_list
                default_optionality::(? optionality))

            // <ANY_OF> ::= any_of: [ <TYPE_REFERENCE>... ]
            (any_of types::(* type_reference 0))

            // <BYTE_LENGTH> ::= byte_length: <INT> | byte_length: <RANGE<INT>>
            (byte_length rule::number_rule)

            // <CODEPOINT_LENGTH> ::= codepoint_length: <INT> | codepoint_length: <RANGE<INT>>
            (codepoint_length rule::number_rule)

            // <CONTAINER_LENGTH> ::= container_length: <INT> | container_length: <RANGE<INT>>
            (container_length rule::number_rule)

            // <CONTAINS> ::= contains: [ <VALUE>... ]
            (contains values::(* ion 0))

            // <CONTENT> ::= content: closed
            (closed_content)

            // <ELEMENT> ::= element: <TYPE_REFERENCE>
            // only applies to LIST and SEXP
            (element type::type_reference)

            // <FIELD> ::= <SYMBOL>: <TYPE_REFERENCE>
            // <FIELDS> ::= fields: { <FIELD>... }
            (fields fields::(* field 0))

            // <NOT> ::= not: <TYPE_REFERENCE>
            (not type::type_reference)

            // <OCCURS> ::= occurs: <INT> | occurs: <RANGE<INT>> | occurs: optional | occurs: required
            (occurs spec::occurs_spec)

            // <ONE_OF> ::= one_of: [ <TYPE_REFERENCE>... ]
            (one_of types::(* type_reference 0))

            // <ORDERED_ELEMENTS> ::= ordered_elements: [ <TYPE_REFERENCE>... ]
            (ordered_elements types::(* type_reference 0))

            // <PRECISION> ::= precision: <INT> | precision: <RANGE<INT>>
            (precision rule::number_rule)

            // <SCALE> ::= scale: <INT> | scale: <RANGE<INT>>
            (scale rule::number_rule)

            // <REGEX> ::= regex: <STRING> | regex: i::<STRING> | regex: m::<STRING> | regex: i::m::<STRING>
            (regex pattern::symbol caseInsensitive::ion multiline::ion) // TODO:  use `bool` instead of `ion` here.

            // <TIMESTAMP_OFFSET> ::= timestamp_offset: [ "[+|-]hh:mm"... ]
            (timestamp_offset offset_patterns::(* symbol 0))

            // <TIMESTAMP_PRECISION> ::= timestamp_precision: <TIMESTAMP_PRECISION_VALUE>
            //                         | timestamp_precision: <RANGE<TIMESTAMP_PRECISION_VALUE>>
            (timestamp_precision precision::ts_precision)

            // <TYPE> ::= type: <TYPE_REFERENCE>
            (type_constraint type::type_reference)

            // <UTF8_BYTE_LENGTH> ::= utf8_byte_length: <INT> | utf8_byte_length: <RANGE<INT>>
            (utf8_byte_length rule::number_rule)

            // <VALID_VALUES> ::= valid_values: [ <VALUE>... ] | valid_values: <RANGE<NUMBER>>
            (valid_values spec::valid_values_spec)

            // Allow open content by supporting arbitrary constraint
            (arbitrary_constraint name::symbol value::ion)
        )
        (product constraint_list items::(* constraint 0))
    ))

/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 *  You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *      http://aws.amazon.com/apache2.0/
 *
 *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 *  language governing permissions and limitations under the License.
 */

// valid cases ----------------------------------------------------------------------------------------------------

for::{
    template: [
        test::{
            name: "lower valid cases",
            sql: "lower('${in}')",
            expected: $result
        }
    ],
    variableSets: [

        // Basic Latin
        {
            in:              ''' !"#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~''',
            result: result:: ''' !"#$%&()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'''
        },

        // Latin-1 Supplement
        {
                         in: "¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ",
            result: result:: "¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿àáâãäåæçèéêëìíîïðñòóôõö×øùúûüýþàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
        },

        // Latin Extended A
        {
                         in: "ĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽž",
            result: result:: "āāăăąąććĉĉċċččďďđđēēĕĕėėęęěěĝĝğğġġģģĥĥħħĩĩīīĭĭįįi̇ıĳĳĵĵķķĸĺĺļļľľŀŀłłńńņņňňŋŋōōŏŏőőœœŕŕŗŗřřśśŝŝşşššţţťťŧŧũũūūŭŭůůűűųųŵŵŷŷÿźźżżžž"
        },

        // Latin Extended B
        {
                         in: "ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏƐƑƒƓƔƕƖƗƘƙƚƛƜƝƞƟƠơƢƣƤƥƦƧƨƩƪƫƬƭƮƯưƱƲƳƴƵƶƷƸƹƺƻƼƽƾƿǀǁǂǃǄǅǆǇǈǉǊǋǌǍǎǏǐǑǒǓǔǕǖǗǘǙǚǛǜǝǞǟǠǡǢǣǤǥǦǧǨǩǪǫǬǭǮǯǰǱǲǳǴǵǶǷǸǹǺǻǼǽǾǿȀȁȂȃȄȅȆȇȈȉȊȋȌȍȎȏȐȑȒȓȔȕȖȗȘșȚțȜȝȞȟȠȡȢȣȤȥȦȧȨȩȪȫȬȭȮȯȰȱȲȳȴȵȶȷȸȹȺȻȼȽȾȿɀɁɂɃɄɅɆɇɈɉɊɋɌɍɎɏ",
            result: result:: "ƀɓƃƃƅƅɔƈƈɖɗƌƌƍǝəɛƒƒɠɣƕɩɨƙƙƚƛɯɲƞɵơơƣƣƥƥʀƨƨʃƪƫƭƭʈưưʊʋƴƴƶƶʒƹƹƺƻƽƽƾƿǀǁǂǃǆǆǆǉǉǉǌǌǌǎǎǐǐǒǒǔǔǖǖǘǘǚǚǜǜǝǟǟǡǡǣǣǥǥǧǧǩǩǫǫǭǭǯǯǰǳǳǳǵǵƕƿǹǹǻǻǽǽǿǿȁȁȃȃȅȅȇȇȉȉȋȋȍȍȏȏȑȑȓȓȕȕȗȗșșțțȝȝȟȟƞȡȣȣȥȥȧȧȩȩȫȫȭȭȯȯȱȱȳȳȴȵȶȷȸȹⱥȼȼƚⱦȿɀɂɂƀʉʌɇɇɉɉɋɋɍɍɏɏ"
        },

        // Latin Extended C
        {
                         in: "ⱠⱡⱢⱣⱤⱥⱦⱧⱨⱩⱪⱫⱬⱭⱮⱯⱰⱱⱲⱳⱴⱵⱶⱷⱸⱹⱺⱻⱼⱽⱾⱿ",
            result: result:: "ⱡⱡɫᵽɽⱥⱦⱨⱨⱪⱪⱬⱬɑɱɐɒⱱⱳⱳⱴⱶⱶⱷⱸⱹⱺⱻⱼⱽȿɀ"
        },

        // FIXME Some characters have weird behavior, for example ß `"ß".toLowerCase().toUpperCase() == "SS"`.
        // TODO all other UTF-8 blocks

        // other alphabets
        {
                        in: "話家身圧費谷料村能計税金ぁてトキほッΔϕξΑ",
            result: result::"話家身圧費谷料村能計税金ぁてトキほッδϕξα"
        },

        // from https://github.com/minimaxir/big-list-of-naughty-strings.
        // Not all were used as some are context specific, e.g. XSS attacks
        { in: "undefined",      result: result::"undefined"},
        { in: "undef",          result: result::"undef"},
        { in: "null",           result: result::"null"},
        { in: "NULL",           result: result::"null"},
        { in: "(null)",         result: result::"(null)"},
        { in: "nil",            result: result::"nil"},
        { in: "NIL",            result: result::"nil"},
        { in: "true",           result: result::"true"},
        { in: "false",          result: result::"false"},
        { in: "True",           result: result::"true"},
        { in: "False",          result: result::"false"},
        { in: "TRUE",           result: result::"true"},
        { in: "FALSE",          result: result::"false"},
        { in: "None",           result: result::"none"},
        { in: "hasOwnProperty", result: result::"hasownproperty"},

        { in: "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", result: result::"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999" },
        { in: "123456789012345678901234567890123456789", result: result::"123456789012345678901234567890123456789" },
        { in: "0",                       result: result::"0" },
        { in: "1",                       result: result::"1" },
        { in: "1.00",                    result: result::"1.00" },
        { in: "$1.00",                   result: result::"$1.00" },
        { in: "1/2",                     result: result::"1/2" },
        { in: "1E2",                     result: result::"1e2" },
        { in: "1E02",                    result: result::"1e02" },
        { in: "1E+02",                   result: result::"1e+02" },
        { in: "-1",                      result: result::"-1" },
        { in: "-1.00",                   result: result::"-1.00" },
        { in: "-$1.00",                  result: result::"-$1.00" },
        { in: "-1/2",                    result: result::"-1/2" },
        { in: "-1E2",                    result: result::"-1e2" },
        { in: "-1E02",                   result: result::"-1e02" },
        { in: "-1E+02",                  result: result::"-1e+02" },
        { in: "1/0",                     result: result::"1/0" },
        { in: "0/0",                     result: result::"0/0" },
        { in: "-2147483648/-1",          result: result::"-2147483648/-1" },
        { in: "-9223372036854775808/-1", result: result::"-9223372036854775808/-1" },
        { in: "-0",                      result: result::"-0" },
        { in: "-0.0",                    result: result::"-0.0" },
        { in: "+0",                      result: result::"+0" },
        { in: "+0.0",                    result: result::"+0.0" },
        { in: "0.00",                    result: result::"0.00" },
        { in: "0..0",                    result: result::"0..0" },
        { in: ".",                       result: result::"." },
        { in: "0.0.0",                   result: result::"0.0.0" },
        { in: "0,00",                    result: result::"0,00" },
        { in: "0,,0",                    result: result::"0,,0" },
        { in: ",",                       result: result::"," },
        { in: "0,0,0",                   result: result::"0,0,0" },
        { in: "0.0/0",                   result: result::"0.0/0" },
        { in: "1.0/0.0",                 result: result::"1.0/0.0" },
        { in: "0.0/0.0",                 result: result::"0.0/0.0" },
        { in: "1,0/0,0",                 result: result::"1,0/0,0" },
        { in: "0,0/0,0",                 result: result::"0,0/0,0" },
        { in: "--1",                     result: result::"--1" },
        { in: "-",                       result: result::"-" },
        { in: "-.",                      result: result::"-." },
        { in: "-,",                      result: result::"-," },
        { in: "NaN",                     result: result::"nan" },
        { in: "Infinity",                result: result::"infinity" },
        { in: "-Infinity",               result: result::"-infinity" },
        { in: "INF",                     result: result::"inf" },
        { in: "1#INF",                   result: result::"1#inf" },
        { in: "-1#IND",                  result: result::"-1#ind" },
        { in: "1#QNAN",                  result: result::"1#qnan" },
        { in: "1#SNAN",                  result: result::"1#snan" },
        { in: "1#IND",                   result: result::"1#ind" },
        { in: "0x0",                     result: result::"0x0" },
        { in: "0xffffffff",              result: result::"0xffffffff" },
        { in: "0xffffffffffffffff",      result: result::"0xffffffffffffffff" },
        { in: "0xabad1dea",              result: result::"0xabad1dea" },
        { in: "1,000.00",                result: result::"1,000.00" },
        { in: "1 000.00",                result: result::"1 000.00" },

        { in: "1,000,000.00",            result: result::"1,000,000.00" },
        { in: "1 000 000.00",            result: result::"1 000 000.00" },
        { in: "1.000,00",                result: result::"1.000,00" },
        { in: "1 000,00",                result: result::"1 000,00" },
        { in: "1.000.000,00",            result: result::"1.000.000,00" },
        { in: "1 000 000,00",            result: result::"1 000 000,00" },
        { in: "01000",                   result: result::"01000" },
        { in: "08",                      result: result::"08" },
        { in: "09",                      result: result::"09" },
        { in: "2.2250738585072011e-308", result: result::"2.2250738585072011e-308" },

        {
                        in: "ЁЂЃЄЅІЇЈЉЊЋЌЍЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя",
            result: result::"ёђѓєѕіїјљњћќѝўџабвгдежзийклмнопрстуфхцчшщъыьэюяабвгдежзийклмнопрстуфхцчшщъыьэюя"
        },

        { in: '''<>?:"{}|_+''', result: result::'''<>?:"{}|_+''' },
        { in: "!@#$%^&*()`~", result: result::"!@#$%^&*()`~"  },
        { in: "Ω≈ç√∫˜µ≤≥÷", result: result::"ω≈ç√∫˜µ≤≥÷"  },
        { in: "åß∂ƒ©˙∆˚¬…æ", result: result::"åß∂ƒ©˙∆˚¬…æ"  },
        { in: "œ∑´®†¥¨ˆøπ“‘", result: result::"œ∑´®†¥¨ˆøπ“‘"  },
        { in: "¡™£¢∞§¶•ªº–≠", result: result::"¡™£¢∞§¶•ªº–≠"  },
        { in: "¸˛Ç◊ı˜Â¯˘¿", result: result::"¸˛ç◊ı˜â¯˘¿"  },
        { in: "ÅÍÎÏ˝ÓÔÒÚÆ☃", result: result::"åíîï˝óôòúæ☃"  },
        { in: "Œ„´‰ˇÁ¨ˆØ∏”’", result: result::"œ„´‰ˇá¨ˆø∏”’"  },
        { in: "`⁄€‹›ﬁﬂ‡°·‚—±", result: result::"`⁄€‹›ﬁﬂ‡°·‚—±"  },
        { in: "⅛⅜⅝⅞", result: result::"⅛⅜⅝⅞"  },
        { in: "٠١٢٣٤٥٦٧٨٩", result: result::"٠١٢٣٤٥٦٧٨٩"  },
        { in: "田中さんにあげて下さい", result: result::"田中さんにあげて下さい"  },
        { in: "パーティーへ行かないか", result: result::"パーティーへ行かないか"  },
        { in: "和製漢語", result: result::"和製漢語"  },
        { in: "部落格", result: result::"部落格"  },
        { in: "사회과학원 어학연구소", result: result::"사회과학원 어학연구소"  },
        { in: "찦차를 타고 온 펲시맨과 쑛다리 똠방각하", result: result::"찦차를 타고 온 펲시맨과 쑛다리 똠방각하"  },
        { in: "社會科學院語學研究所", result: result::"社會科學院語學研究所"  },
        { in: "울란바토르", result: result::"울란바토르"  },
        { in: "𠜎𠜱𠝹𠱓𠱸𠲖𠳏", result: result::"𠜎𠜱𠝹𠱓𠱸𠲖𠳏"  },
        { in: "Ⱥ", result: result::"ⱥ"  },
        { in: "Ⱦ", result: result::"ⱦ"  },

        { in: "ヽ༼ຈل͜ຈ༽ﾉ ヽ༼ຈل͜ຈ༽ﾉ", result: result::"ヽ༼ຈل͜ຈ༽ﾉ ヽ༼ຈل͜ຈ༽ﾉ" },
        { in: "(｡◕ ∀ ◕｡)", result: result::"(｡◕ ∀ ◕｡)" },
        { in: "｀ｨ(´∀｀∩", result: result::"｀ｨ(´∀｀∩" },
        { in: "__ﾛ(,_,*)", result: result::"__ﾛ(,_,*)" },
        { in: "・(￣∀￣)・:*:", result: result::"・(￣∀￣)・:*:" },
        { in: "ﾟ･✿ヾ╲(｡◕‿◕｡)╱✿･ﾟ", result: result::"ﾟ･✿ヾ╲(｡◕‿◕｡)╱✿･ﾟ" },
        { in: ",。・:*:・゜’( ☻ ω ☻ )。・:*:・゜’", result: result::",。・:*:・゜’( ☻ ω ☻ )。・:*:・゜’" },
        { in: "(╯°□°）╯︵ ┻━┻)", result: result::"(╯°□°）╯︵ ┻━┻)" },
        { in: "(ﾉಥ益ಥ）ﾉ﻿ ┻━┻", result: result::"(ﾉಥ益ಥ）ﾉ﻿ ┻━┻" },
        { in: "┬─┬ノ( º _ ºノ)", result: result::"┬─┬ノ( º _ ºノ)" },
        { in: "( ͡° ͜ʖ ͡°)", result: result::"( ͡° ͜ʖ ͡°)" },

        { in: "😍", result: result::"😍" },
        { in: "👩🏽", result: result::"👩🏽" },
        { in: "👾 🙇 💁 🙅 🙆 🙋 🙎 🙍", result: result::"👾 🙇 💁 🙅 🙆 🙋 🙎 🙍" },
        { in: "🐵 🙈 🙉 🙊", result: result::"🐵 🙈 🙉 🙊" },
        { in: "❤️ 💔 💌 💕 💞 💓 💗 💖 💘 💝 💟 💜 💛 💚 💙", result: result::"❤️ 💔 💌 💕 💞 💓 💗 💖 💘 💝 💟 💜 💛 💚 💙" },
        { in: "✋🏿 💪🏿 👐🏿 🙌🏿 👏🏿 🙏🏿", result: result::"✋🏿 💪🏿 👐🏿 🙌🏿 👏🏿 🙏🏿" },
        { in: "🚾 🆒 🆓 🆕 🆖 🆗 🆙 🏧", result: result::"🚾 🆒 🆓 🆕 🆖 🆗 🆙 🏧" },
        { in: "0️⃣ 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟", result: result::"0️⃣ 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟" },
        { in: "🇺🇸🇷🇺🇸 🇦🇫🇦🇲🇸", result: result::"🇺🇸🇷🇺🇸 🇦🇫🇦🇲🇸" },
        { in: "🇺🇸🇷🇺🇸🇦🇫🇦🇲", result: result::"🇺🇸🇷🇺🇸🇦🇫🇦🇲" },
        { in: "🇺🇸🇷🇺🇸🇦", result: result::"🇺🇸🇷🇺🇸🇦" },

        { in: "Ｔｈｅ ｑｕｉｃｋ ｂｒｏｗｎ ｆｏｘ ｊｕｍｐｓ ＯＶＥＲ ＴＨＥ ｌａｚｙ ｄｏｇ", result: result::"ｔｈｅ ｑｕｉｃｋ ｂｒｏｗｎ ｆｏｘ ｊｕｍｐｓ ｏｖｅｒ ｔｈｅ ｌａｚｙ ｄｏｇ" },
    ]
}


// null propagation -----------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "lower null and missing propagation",
            sql: "lower(${param})",
            expected: $result
        }
    ],
    variableSets: [
        { param: "null",    result: result::null },
        { param: "missing", result: result::null },
    ]
}

// wrong number of arguments --------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "lower wrong number of arguments",
            sql: "${sql}",
            expected: error::{
                code: EVALUATOR_INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNC_CALL,
                properties: {
                    LINE_NUMBER:1,
                    COLUMN_NUMBER:1,
                    EXPECTED_ARITY_MIN:1,
                    EXPECTED_ARITY_MAX:1
                }
            }
        }
    ],
    variableSets: [
        { sql: "lower()" },
        { sql: "lower('', '')" },
        { sql: "lower('', 1)" },
    ]
}

// wrong type of arguments ----------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "lower wrong type of arguments",
            sql: "lower(${param})",
            expected: error::{
                code: "null",
                properties: {
                    LINE_NUMBER:1,
                    COLUMN_NUMBER:1,
                }
            }
        }
    ],
    variableSets: [
        { param: "1" },
        { param: "1.0" },
        { param: "1e0" },
        { param: "`()`" },
        { param: "true" },
        { param: "`[]`" },
        { param: "`{}`" },
    ]
}


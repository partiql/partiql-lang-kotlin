/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 *  You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *      http://aws.amazon.com/apache2.0/
 *
 *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 *  language governing permissions and limitations under the License.
 */

// valid cases ----------------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "char_length valid cases",
            sql: "char_length('${in}')",
            expected: $result
        },

        test::{
            name: "character_length valid cases",
            sql: "character_length('${in}')",
            expected: $result
        }
    ],

    variableSets: [
        { in: "", result: result::0 },
        { in: "a", result: result::1 },
        { in: "123456789", result: result::9 },
        { in: "avião", result: result::5 },  // non ASCII
        { in: "eࠫ",                     result: result::2 },  // eࠫ' is two codepoints: the letter 'e' and combining character U+032B
        { in: "😁😞😸😸", result: result::4 },  // non-BMP unicode characters
        { in: "話家身圧費谷料村能計税金", result: result::12 }, // other alphabets

        // from https://github.com/minimaxir/big-list-of-naughty-strings.
        // Not all were used as some are context specific, e.g. XSS attacks
        { in: "undefined",      result: result::9 },
        { in: "undef",          result: result::5 },
        { in: "null",           result: result::4 },
        { in: "NULL",           result: result::4 },
        { in: "(null)",         result: result::6 },
        { in: "nil",            result: result::3 },
        { in: "NIL",            result: result::3 },
        { in: "true",           result: result::4 },
        { in: "false",          result: result::5 },
        { in: "True",           result: result::4 },
        { in: "False",          result: result::5 },
        { in: "TRUE",           result: result::4 },
        { in: "FALSE",          result: result::5 },
        { in: "None",           result: result::4 },
        { in: "hasOwnProperty", result: result::14 },

        { in: "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", result: result::96 },
        { in: "123456789012345678901234567890123456789", result: result::39 },
        { in: "0",                       result: result::1 },
        { in: "1",                       result: result::1 },
        { in: "1.00",                    result: result::4 },
        { in: "$1.00",                   result: result::5 },
        { in: "1/2",                     result: result::3 },
        { in: "1E2",                     result: result::3 },
        { in: "1E02",                    result: result::4 },
        { in: "1E+02",                   result: result::5 },
        { in: "-1",                      result: result::2 },
        { in: "-1.00",                   result: result::5 },
        { in: "-$1.00",                  result: result::6 },
        { in: "-1/2",                    result: result::4 },
        { in: "-1E2",                    result: result::4 },
        { in: "-1E02",                   result: result::5 },
        { in: "-1E+02",                  result: result::6 },
        { in: "1/0",                     result: result::3 },
        { in: "0/0",                     result: result::3 },
        { in: "-2147483648/-1",          result: result::14 },
        { in: "-9223372036854775808/-1", result: result::23 },
        { in: "-0",                      result: result::2 },
        { in: "-0.0",                    result: result::4 },
        { in: "+0",                      result: result::2 },
        { in: "+0.0",                    result: result::4 },
        { in: "0.00",                    result: result::4 },
        { in: "0..0",                    result: result::4 },
        { in: ".",                       result: result::1 },
        { in: "0.0.0",                   result: result::5 },
        { in: "0,00",                    result: result::4 },
        { in: "0,,0",                    result: result::4 },
        { in: ",",                       result: result::1 },
        { in: "0,0,0",                   result: result::5 },
        { in: "0.0/0",                   result: result::5 },
        { in: "1.0/0.0",                 result: result::7 },
        { in: "0.0/0.0",                 result: result::7 },
        { in: "1,0/0,0",                 result: result::7 },
        { in: "0,0/0,0",                 result: result::7 },
        { in: "--1",                     result: result::3 },
        { in: "-",                       result: result::1 },
        { in: "-.",                      result: result::2 },
        { in: "-,",                      result: result::2 },
        { in: "NaN",                     result: result::3 },
        { in: "Infinity",                result: result::8 },
        { in: "-Infinity",               result: result::9 },
        { in: "INF",                     result: result::3 },
        { in: "1#INF",                   result: result::5 },
        { in: "-1#IND",                  result: result::6 },
        { in: "1#QNAN",                  result: result::6 },
        { in: "1#SNAN",                  result: result::6 },
        { in: "1#IND",                   result: result::5 },
        { in: "0x0",                     result: result::3 },
        { in: "0xffffffff",              result: result::10 },
        { in: "0xffffffffffffffff",      result: result::18 },
        { in: "0xabad1dea",              result: result::10 },
        { in: "1,000.00",                result: result::8 },
        { in: "1 000.00",                result: result::8 },

        { in: "1,000,000.00",            result: result::12 },
        { in: "1 000 000.00",            result: result::12 },
        { in: "1.000,00",                result: result::8 },
        { in: "1 000,00",                result: result::8 },
        { in: "1.000.000,00",            result: result::12 },
        { in: "1 000 000,00",            result: result::12 },
        { in: "01000",                   result: result::5 },
        { in: "08",                      result: result::2 },
        { in: "09",                      result: result::2 },
        { in: "2.2250738585072011e-308", result: result::23 },

        { in: "ЁЂЃЄЅІЇЈЉЊЋЌЍЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя", result: result::79 },
        { in: '''<>?:"{}|_+''', result: result::10 },
        { in: "!@#$%^&*()`~", result: result::12 },
        { in: "Ω≈ç√∫˜µ≤≥÷", result: result::10 },
        { in: "åß∂ƒ©˙∆˚¬…æ", result: result::11 },
        { in: "œ∑´®†¥¨ˆøπ“‘", result: result::12 },
        { in: "¡™£¢∞§¶•ªº–≠", result: result::12 },
        { in: "¸˛Ç◊ı˜Â¯˘¿", result: result::10 },
        { in: "ÅÍÎÏ˝ÓÔÒÚÆ☃", result: result::12 },
        { in: "Œ„´‰ˇÁ¨ˆØ∏”’", result: result::12 },
        { in: "`⁄€‹›ﬁﬂ‡°·‚—±", result: result::13 },
        { in: "⅛⅜⅝⅞", result: result::4 },
        { in: "٠١٢٣٤٥٦٧٨٩", result: result::10 },
        { in: "田中さんにあげて下さい", result: result::11 },
        { in: "パーティーへ行かないか", result: result::11 },
        { in: "和製漢語", result: result::4 },
        { in: "部落格", result: result::3 },
        { in: "사회과학원 어학연구소", result: result::11 },
        { in: "찦차를 타고 온 펲시맨과 쑛다리 똠방각하", result: result::22 },
        { in: "社會科學院語學研究所", result: result::10 },
        { in: "울란바토르", result: result::5 },
        { in: "𠜎𠜱𠝹𠱓𠱸𠲖𠳏", result: result::7 },
        { in: "Ⱥ", result: result::1 },
        { in: "Ⱦ", result: result::1 },

        { in: "ヽ༼ຈل͜ຈ༽ﾉ ヽ༼ຈل͜ຈ༽ﾉ", result: result::17 },
        { in: "(｡◕ ∀ ◕｡)", result: result::9 },
        { in: "｀ｨ(´∀｀∩", result: result::7 },
        { in: "__ﾛ(,_,*)", result: result::9 },
        { in: "・(￣∀￣)・:*:", result: result::10 },
        { in: "ﾟ･✿ヾ╲(｡◕‿◕｡)╱✿･ﾟ", result: result::16 },
        { in: ",。・:*:・゜’( ☻ ω ☻ )。・:*:・゜’", result: result::26 },
        { in: "(╯°□°）╯︵ ┻━┻)", result: result::13 },
        { in: "(ﾉಥ益ಥ）ﾉ﻿ ┻━┻", result: result::12 },
        { in: "┬─┬ノ( º _ ºノ)", result: result::13 },
        { in: "( ͡° ͜ʖ ͡°)", result: result::11 },

        { in: "😍", result: result::1 },

        // there are hidden code-points for some emoji's, see http://unicode.org/reports/tr51/#def_emoji_modifier_sequence
        // since char_length counts UTF-8 code points the results below are correct, just not obviously so :)

        // U+1F469 U+1F3FD
        { in: "👩🏽", result: result::2 },

        // U+1F469 U+1F47E U+0020 U+1F647 U+0020 U+1F481 U+0020 U+1F645 U+0020 U+1F646 U+0020 U+1F64B U+0020 U+1F64E U+0020 U+1F64D
        { in: "👾 🙇 💁 🙅 🙆 🙋 🙎 🙍", result: result::15 },

        // U+1F435 U+0020 U+1F648 U+0020 U+1F649 U+0020 U+1F64A
        { in: "🐵 🙈 🙉 🙊", result: result::7 },

        // U+2764 U+FE0F U+0020 U+1F494 U+0020 U+1F48C U+0020 U+1F495 U+0020 U+1F49E U+0020 U+1F493 U+0020 U+1F497 U+0020 U+1F496 U+0020 U+1F498 U+0020 U+1F49D U+0020 U+1F49F U+0020 U+1F49C U+0020 U+1F49B U+0020 U+1F49A U+0020 U+1F499
        { in: "❤️ 💔 💌 💕 💞 💓 💗 💖 💘 💝 💟 💜 💛 💚 💙", result: result::30 },

        // U+270B U+1F3FF U+0020 U+1F4AA U+1F3FF U+0020 U+1F450 U+1F3FF U+0020 U+1F64C U+1F3FF U+0020 U+1F44F U+1F3FF U+0020 U+1F64F U+1F3FF
        { in: "✋🏿 💪🏿 👐🏿 🙌🏿 👏🏿 🙏🏿", result: result::17 },

        //  U+2764 U+270B U+1F3FF U+0020 U+1F4AA U+1F3FF U+1F6BE U+0020 U+1F192 U+0020 U+1F193 U+0020 U+1F195 U+0020 U+1F196 U+0020 U+1F197 U+0020 U+1F199 U+0020 U+1F3E7
        { in: "🚾 🆒 🆓 🆕 🆖 🆗 🆙 🏧", result: result::15 },

        // U+0030 U+FE0F U+20E3 U+0020 U+0031 U+FE0F U+20E3 U+0020 U+0032 U+FE0F U+20E3 U+0020 U+0033 U+FE0F U+20E3 U+0020 U+0034 U+FE0F U+20E3 U+0020 U+0035 U+FE0F U+20E3 U+0020 U+0036 U+FE0F U+20E3 U+0020 U+0037 U+FE0F U+20E3 U+0020 U+0038 U+FE0F U+20E3 U+0020 U+0039 U+FE0F U+20E3 U+0020 U+1F51F
        { in: "0️⃣ 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟", result: result::41 },

        // U+1F1FA U+1F1F8 U+1F1F7 U+1F1FA U+1F1F8 U+0020 U+1F1E6 U+1F1EB U+1F1E6 U+1F1F2 U+1F1F8
        { in: "🇺🇸🇷🇺🇸 🇦🇫🇦🇲🇸", result: result::11 },

        // U+1F1FA U+1F1F8 U+1F1F7 U+1F1FA U+1F1F8 U+1F1E6 U+1F1EB U+1F1E6 U+1F1F2
        { in: "🇺🇸🇷🇺🇸🇦🇫🇦🇲", result: result::9 },

        // U+1F1FA U+1F1F8 U+1F1F7 U+1F1FA U+1F1F8 U+1F1E6
        { in: "🇺🇸🇷🇺🇸🇦", result: result::6 },

        { in: "Ｔｈｅ ｑｕｉｃｋ ｂｒｏｗｎ ｆｏｘ ｊｕｍｐｓ ｏｖｅｒ ｔｈｅ ｌａｚｙ ｄｏｇ", result: result::43 },
        { in: "𝐓𝐡𝐞 𝐪𝐮𝐢𝐜𝐤 𝐛𝐫𝐨𝐰𝐧 𝐟𝐨𝐱 𝐣𝐮𝐦𝐩𝐬 𝐨𝐯𝐞𝐫 𝐭𝐡𝐞 𝐥𝐚𝐳𝐲 𝐝𝐨𝐠", result: result::43 },
        { in: "𝕿𝖍𝖊 𝖖𝖚𝖎𝖈𝖐 𝖇𝖗𝖔𝖜𝖓 𝖋𝖔𝖝 𝖏𝖚𝖒𝖕𝖘 𝖔𝖛𝖊𝖗 𝖙𝖍𝖊 𝖑𝖆𝖟𝖞 𝖉𝖔𝖌", result: result::43 },
        { in: "𝑻𝒉𝒆 𝒒𝒖𝒊𝒄𝒌 𝒃𝒓𝒐𝒘𝒏 𝒇𝒐𝒙 𝒋𝒖𝒎𝒑𝒔 𝒐𝒗𝒆𝒓 𝒕𝒉𝒆 𝒍𝒂𝒛𝒚 𝒅𝒐𝒈", result: result::43 },
        { in: "𝓣𝓱𝓮 𝓺𝓾𝓲𝓬𝓴 𝓫𝓻𝓸𝔀𝓷 𝓯𝓸𝔁 𝓳𝓾𝓶𝓹𝓼 𝓸𝓿𝓮𝓻 𝓽𝓱𝓮 𝓵𝓪𝔃𝔂 𝓭𝓸𝓰", result: result::43 },
        { in: "𝕋𝕙𝕖 𝕢𝕦𝕚𝕔𝕜 𝕓𝕣𝕠𝕨𝕟 𝕗𝕠𝕩 𝕛𝕦𝕞𝕡𝕤 𝕠𝕧𝕖𝕣 𝕥𝕙𝕖 𝕝𝕒𝕫𝕪 𝕕𝕠𝕘", result: result::43 },
        { in: "𝚃𝚑𝚎 𝚚𝚞𝚒𝚌𝚔 𝚋𝚛𝚘𝚠𝚗 𝚏𝚘𝚡 𝚓𝚞𝚖𝚙𝚜 𝚘𝚟𝚎𝚛 𝚝𝚑𝚎 𝚕𝚊𝚣𝚢 𝚍𝚘𝚐", result: result::43 },
        { in: "⒯⒣⒠ ⒬⒰⒤⒞⒦ ⒝⒭⒪⒲⒩ ⒡⒪⒳ ⒥⒰⒨⒫⒮ ⒪⒱⒠⒭ ⒯⒣⒠ ⒧⒜⒵⒴ ⒟⒪⒢", result: result::43 },
    ]
}

// null and missing propagation -----------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name : "char_length null and missing propagation",
            sql : "char_length(${in})",
            expected : $result
        },

        test::{
            name : "character_length null and missing propagation",
            sql : "character_length(${in})",
            expected : $result
        }
    ],
    variableSets: [
        { in: "null", result: result::null },
        { in: "missing", result: result::null }
    ]
}

// wrong types ----------------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "char_length wrong types",
            sql : "char_length(${in})",
            expected: error::{
                code: "null",
                properties: {
                    LINE_NUMBER:1,
                    COLUMN_NUMBER:1
                }
            }
        },

        test::{
            name: "character_length wrong types",
            sql : "character_length(${in})",
            expected: error::{
                code: "null",
                properties: {
                    LINE_NUMBER:1,
                    COLUMN_NUMBER:1
                }
            }
        }
    ],
    variableSets: [
        { in: "1" },
        { in: "`2000T`" },
        { in: "1.0" },
        { in: "1e0" },
        { in: "true" },
        { in: "[]" },
        { in: "`()`" },
        { in: "<<>>" },
        { in: "`{}`" },
    ]
}

// wrong number of arguments --------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "char_length wrong number of arguments",
            sql: "${sql}",
            expected: error::{
                code: EVALUATOR_INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNC_CALL,
                properties: {
                    LINE_NUMBER:1,
                    COLUMN_NUMBER:1,
                    EXPECTED_ARITY_MIN:1,
                    EXPECTED_ARITY_MAX:1
                }
            }
        }
    ],
    variableSets: [
        { sql: "char_length()" },
        { sql: '''char_length('', '')''' },
        { sql: '''char_length('', 1)''' },
    ]
}

/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 *  You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *      http://aws.amazon.com/apache2.0/
 *
 *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 *  language governing permissions and limitations under the License.
 */

// valid cases ----------------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "size valid cases",
            sql: "size(${param})",
            expected: $result
        }
    ],
    variableSets: [
        // empty
        { param: "`[]`", result: result::0 },
        { param: "<<>>", result: result::0 },
        { param: "`{}`", result: result::0 },
        // { param: "`()`", result: result::0 }, // FIXME https://github.com/partiql/partiql-lang-kotlin/issues/30

        // single element
        { param: "`[1]`",    result: result::1 },
        { param: "<<1>>",    result: result::1 },
        { param: "`{a: 1}`", result: result::1 },
        // { param: "`(1)`", result: result::1 }, // FIXME https://github.com/partiql/partiql-lang-kotlin/issues/30

        // more than 1 element
        { param: "`[1, 1.0]`",       result: result::2 },
        { param: "<<1, 2, 3>>",      result: result::3 },
        { param: "`{a: 1, b: foo}`", result: result::2 },
        // { param: "`(1 2)`", result: result::2 }, // FIXME https://github.com/partiql/partiql-lang-kotlin/issues/30
        // nested sequences
        { param: "`[[], [1,2,3,4,[5,6], ()], ({a: 1, b: 2})]`", result: result::3 },

        // struct with repeated keys
        { param: "`{a: 1, a: 2}`", result: result::2 },

        // sequences with UNKNOWN as single element
        { param: "`[null]`",    result: result::1 },
        { param: "<<null>>",    result: result::1 },
        { param: "`{a: null}`", result: result::1 },
        // { param: "`(null)`", result: result::1 }, // FIXME https://github.com/partiql/partiql-lang-kotlin/issues/30

        { param: "`[missing]`",    result: result::1 },
        { param: "<<missing>>",    result: result::1 },
        { param: "`{a: missing}`", result: result::1 },
        // { param: "`(missing)`", result: result::1 }, // FIXME https://github.com/partiql/partiql-lang-kotlin/issues/30
    ]
}

// null propagation -----------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "size null and missing propagation",
            sql: "size(${param})",
            expected: $result
        }
    ],
    variableSets: [
        { param: "null",    result: result::null },
        { param: "missing", result: result::null },
    ]
}

// wrong number of arguments --------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "size wrong number of arguments",
            sql: "${sql}",
            expected: error::{
                code: EVALUATOR_INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNC_CALL,
                properties: {
                    LINE_NUMBER: 1,
                    COLUMN_NUMBER: 1,
                    EXPECTED_ARITY_MIN: 1,
                    EXPECTED_ARITY_MAX: 1
                }
            }
        }
    ],
    variableSets: [
        { sql: "size()" },
        { sql: "size(`[]`, `[]`)" },
        { sql: "size(`[]`, 1)" },
    ]
}

// wrong type of arguments ----------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "size wrong type of arguments",
            sql: "size(${param})",
            expected: error::{
                code: EVALUATOR_INCORRECT_TYPE_OF_ARGUMENTS_TO_FUNC_CALL,
                properties: {
                    LINE_NUMBER: 1,
                    COLUMN_NUMBER: 1,
                    FUNCTION_NAME: "size",
                    EXPECTED_ARGUMENT_TYPES: "LIST or BAG or STRUCT",
                    ACTUAL_ARGUMENT_TYPES: $actual
                }
            }
        }
    ],
    variableSets: [
        { param: 1,    actual: "INT" },
        { param: "''", actual: "STRING" }
    ]
}

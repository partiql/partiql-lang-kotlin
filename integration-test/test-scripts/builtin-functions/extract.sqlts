/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 *  You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *      http://aws.amazon.com/apache2.0/
 *
 *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 *  language governing permissions and limitations under the License.
 */

// valid cases ----------------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "extract valid cases",
            sql: "extract(${time_part} from `${timestamp}`)",
            expected: $result
        }
    ],
    variableSets: [
        { result: result::2017, time_part: "year",            timestamp: "2017T" },
        { result: result::1,    time_part: "month",           timestamp: "2017T" },
        { result: result::1,    time_part: "day",             timestamp: "2017T" },
        { result: result::0,    time_part: "hour",            timestamp: "2017T" },
        { result: result::0,    time_part: "minute",          timestamp: "2017T" },
        { result: result::0,    time_part: "second",          timestamp: "2017T" },
        { result: result::0,    time_part: "timezone_hour",   timestamp: "2017T" },
        { result: result::0,    time_part: "timezone_minute", timestamp: "2017T" },

        // year, month
        { result: result::2017, time_part: "year",            timestamp: "2017-01T" },
        { result: result::1,    time_part: "month",           timestamp: "2017-01T" },
        { result: result::1,    time_part: "day",             timestamp: "2017-01T" },
        { result: result::0,    time_part: "hour",            timestamp: "2017-01T" },
        { result: result::0,    time_part: "minute",          timestamp: "2017-01T" },
        { result: result::0,    time_part: "second",          timestamp: "2017-01T" },
        { result: result::0,    time_part: "timezone_hour",   timestamp: "2017-01T" },
        { result: result::0,    time_part: "timezone_minute", timestamp: "2017-01T" },

        // year, month, day
        { result: result::2017, time_part: "year",            timestamp: "2017-01-02T" },
        { result: result::1,    time_part: "month",           timestamp: "2017-01-02T" },
        { result: result::2,    time_part: "day",             timestamp: "2017-01-02T" },
        { result: result::0,    time_part: "hour",            timestamp: "2017-01-02T" },
        { result: result::0,    time_part: "minute",          timestamp: "2017-01-02T" },
        { result: result::0,    time_part: "second",          timestamp: "2017-01-02T" },
        { result: result::0,    time_part: "timezone_hour",   timestamp: "2017-01-02T" },
        { result: result::0,    time_part: "timezone_minute", timestamp: "2017-01-02T" },

        // year, month, day, hour, minute
        { result: result::2017, time_part: "year",            timestamp: "2017-01-02T03:04Z" },
        { result: result::1,    time_part: "month",           timestamp: "2017-01-02T03:04Z" },
        { result: result::2,    time_part: "day",             timestamp: "2017-01-02T03:04Z" },
        { result: result::3,    time_part: "hour",            timestamp: "2017-01-02T03:04Z" },
        { result: result::4,    time_part: "minute",          timestamp: "2017-01-02T03:04Z" },
        { result: result::0,    time_part: "second",          timestamp: "2017-01-02T03:04Z" },
        { result: result::0,    time_part: "timezone_hour",   timestamp: "2017-01-02T03:04Z" },
        { result: result::0,    time_part: "timezone_minute", timestamp: "2017-01-02T03:04Z" },

        // year, month, day, hour, minute, second
        { result: result::2017, time_part: "year",            timestamp: "2017-01-02T03:04:05Z" },
        { result: result::1,    time_part: "month",           timestamp: "2017-01-02T03:04:05Z" },
        { result: result::2,    time_part: "day",             timestamp: "2017-01-02T03:04:05Z" },
        { result: result::3,    time_part: "hour",            timestamp: "2017-01-02T03:04:05Z" },
        { result: result::4,    time_part: "minute",          timestamp: "2017-01-02T03:04:05Z" },
        { result: result::5,    time_part: "second",          timestamp: "2017-01-02T03:04:05Z" },
        { result: result::0,    time_part: "timezone_hour",   timestamp: "2017-01-02T03:04:05Z" },
        { result: result::0,    time_part: "timezone_minute", timestamp: "2017-01-02T03:04:05Z" },

        // year, month, day, hour, minute, second, local offset
        { result: result::2017, time_part: "year",            timestamp: "2017-01-02T03:04:05+07:08" },
        { result: result::1,    time_part: "month",           timestamp: "2017-01-02T03:04:05+07:08" },
        { result: result::2,    time_part: "day",             timestamp: "2017-01-02T03:04:05+07:08" },
        { result: result::3,    time_part: "hour",            timestamp: "2017-01-02T03:04:05+07:08" },
        { result: result::4,    time_part: "minute",          timestamp: "2017-01-02T03:04:05+07:08" },
        { result: result::5,    time_part: "second",          timestamp: "2017-01-02T03:04:05+07:08" },
        { result: result::7,    time_part: "timezone_hour",   timestamp: "2017-01-02T03:04:05+07:08" },
        { result: result::8,    time_part: "timezone_minute", timestamp: "2017-01-02T03:04:05+07:08" },

        // negative offset
        { result: result::-7, time_part: "timezone_hour",   timestamp: "2017-01-02T03:04:05-07:08" },
        { result: result::-8, time_part: "timezone_minute", timestamp: "2017-01-02T03:04:05-07:08" }
    ]
}

// null propagation -----------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "extract null and missing propagation",
            sql: "extract(${time_part} from ${timestamp})",
            expected: $result
        }
    ],
    variableSets: [
        { result: result::null, time_part: "year", timestamp: "null" },
        { result: result::null, time_part: "year", timestamp: "missing" },
    ]
}

// wrong number of arguments --------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "extract wrong number of arguments",
            sql: "${sql}",
            expected: $error
        }
    ],

    variableSets: [
        { sql: "extract()",                     error: error::{ code: PARSE_EXPECTED_DATE_PART,  properties: { LINE_NUMBER: 1, COLUMN_NUMBER: 9,  TOKEN_TYPE: "RIGHT_PAREN", TOKEN_VALUE: ')' } } },
        { sql: "extract(year)",                 error: error::{ code: PARSE_EXPECTED_KEYWORD,    properties: { LINE_NUMBER: 1, COLUMN_NUMBER: 13, TOKEN_TYPE: "RIGHT_PAREN", TOKEN_VALUE: ')', KEYWORD: "FROM" } } },
        { sql: "extract(year from)",            error: error::{ code: PARSE_UNEXPECTED_TERM,     properties: { LINE_NUMBER: 1, COLUMN_NUMBER: 18, TOKEN_TYPE: "RIGHT_PAREN", TOKEN_VALUE: ')' } } },
        { sql: "extract(`2017T`)",              error: error::{ code: PARSE_EXPECTED_DATE_PART,  properties: { LINE_NUMBER: 1, COLUMN_NUMBER: 9,  TOKEN_TYPE: "LITERAL",     TOKEN_VALUE: 2017T } } },
        { sql: "extract(from `2017T`)",         error: error::{ code: PARSE_EXPECTED_DATE_PART,  properties: { LINE_NUMBER: 1, COLUMN_NUMBER: 9,  TOKEN_TYPE: "KEYWORD",     TOKEN_VALUE: from } } },
        { sql: "extract(year from `2017T`, 1)", error: error::{ code: PARSE_EXPECTED_TOKEN_TYPE, properties: { LINE_NUMBER: 1, COLUMN_NUMBER: 26, TOKEN_TYPE: "COMMA",       TOKEN_VALUE: ',', EXPECTED_TOKEN_TYPE:"RIGHT_PAREN" } } },
        { sql: "extract(year, `2017T`)",        error: error::{ code: PARSE_EXPECTED_KEYWORD,    properties: { LINE_NUMBER: 1, COLUMN_NUMBER: 13, TOKEN_TYPE: "COMMA",       TOKEN_VALUE: ',', KEYWORD:"FROM", } } },
    ]
}

// wrong type of arguments ----------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "extract wrong type of arguments",
            sql: "extract(${first} from ${second})",
            expected: $error
        }
    ],
    variableSets: [
        { first: "year",   second: "1",       error: error::{ code: "null", properties: { LINE_NUMBER:1, COLUMN_NUMBER:1 } } },
        { first: 1,        second: "`2017T`", error: error::{ code: PARSE_EXPECTED_DATE_PART, properties: { LINE_NUMBER:1, COLUMN_NUMBER:9, TOKEN_TYPE:"LITERAL", TOKEN_VALUE:1 } } },
    ]
}

// invalid arguments ----------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            name: "extract invalid time part",
            sql: "extract(${time_part} from `2017T`)",
            expected: error::{
                code: PARSE_EXPECTED_DATE_PART,
                properties: {
                    LINE_NUMBER: 1,
                    COLUMN_NUMBER: 9,
                    TOKEN_TYPE: $tt,
                    TOKEN_VALUE: $tv
                }
            }
        }
    ],
    variableSets: [
        { time_part: "foo",     tt: "IDENTIFIER", tv: foo },
        { time_part: "null",    tt: "NULL",       tv: null },
        { time_part: "missing", tt: "MISSING",    tv: null }
    ]
}

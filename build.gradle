/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 *  You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *      http://aws.amazon.com/apache2.0/
 *
 *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 *  language governing permissions and limitations under the License.
 */

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.31' apply false
    // https://arturbosch.github.io/detekt/groovydsl.html
    id "io.gitlab.arturbosch.detekt" version "1.20.0-RC1" apply false
    id 'org.jlleitschuh.gradle.ktlint' version '10.2.1'
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'org.jlleitschuh.gradle.ktlint'

    jacoco {
        toolVersion = '0.8.8'
        reportsDirectory = file("$buildDir/reports/jacoco/")
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    group = 'org.partiql'
    version = '0.8.2'
}

buildDir = new File(rootProject.projectDir, "gradle-build/" + project.name)

configure(subprojects.findAll { it.name != 'example' }) {
    apply plugin: 'io.gitlab.arturbosch.detekt'
    
    detekt {
        input = files("src/")
        parallel = true                                       // Builds the AST in parallel. Rules are always executed in parallel. Can lead to speedups in larger projects. `false` by default.
        debug = false                                         // Adds debug output during task execution. `false` by default.
        ignoreFailures = true                                 // If set to `true` the build does not fail when the maxIssues count was reached. Defaults to `false`.
        config = files(new File(rootProject.projectDir, "detekt-config.yml").toString())
        reports {
            html.required.set(true)
            txt.required.set(true)
            xml.required.set(true)
        }
    }
}


subprojects { proj ->

    apply plugin: "org.jetbrains.kotlin.jvm"
    tasks.withType(Test) {
        jvmArgs += ['-Duser.language=en', '-Duser.country=US']
        maxHeapSize = "4g"
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
        useJUnitPlatform()
        jacocoTestReport {
            reports {
                xml.required.set(true)
                html.required.set(true)
                html.outputLocation.set(file("${buildDir}/reports/jacoco/html"))
            }
            afterEvaluate {
                classDirectories.setFrom(files(classDirectories.files.collect {
                    // exclude PIG generated files.
                    fileTree(dir: it, exclude: [
                            "org/partiql/lang/domains/*.class",
                            "org/partiql/ionschema/model/*.class"
                    ])
                }))
            }
        }

        // Make the ktlinCheck task run *before* unit tests--faster failure here means we won't need to re-run the
        // tests (which can take several minutes) after applying formatting fixes.
        dependsOn.add(ktlintCheck)
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
            apiVersion = "1.4"
            languageVersion = "1.4"
        }
    }

    ktlint {
        filter {
            // excluding multiple files from ktlint was somewhat of a challenge using other approaches..
            // We use the "workaround" described here: https://github.com/JLLeitschuh/ktlint-gradle/issues/222
            exclude({it.file.absolutePath.contains("/generated-src/")})
        }
    }

    plugins.withId('java', { _ ->
        java {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    })

    // Include generated version-hash build properties file in the main source sets
    plugins.withId('org.jetbrains.kotlin.jvm', { _ ->
        def generatedVersionDir = "${buildDir}/generated-version"
        sourceSets {
            main {
                output.dir(generatedVersionDir, builtBy: 'generateVersionAndHashProperties')
            }
        }
        // generates a build properties file with the current PartiQL version and most recent commit hash
        task generateVersionAndHashProperties {
            doLast {
                def propertiesFile = file "$generatedVersionDir/partiql.properties"
                propertiesFile.parentFile.mkdirs()
                def properties = new Properties()
                // get current PartiQL version
                properties.setProperty("version", version.toString())
                // get most recent short commit hash
                def commitHash = new ByteArrayOutputStream()
                exec {
                    commandLine 'git', 'rev-parse', '--short', 'HEAD'
                    standardOutput = commitHash
                }
                properties.setProperty("commit", commitHash.toString().trim())
                propertiesFile.withWriter { properties.store(it, null) }
            }
        }
        processResources.dependsOn generateVersionAndHashProperties
    })

    if (project.name == "partiql-isl" || project.name == "partiql-tests-runner") {
        // skip subprojects using the conventional Gradle layout
        return
    }

    plugins.withId('java', { _ ->
        sourceSets {
            main.java.srcDirs = ["src"]
            main.resources.srcDirs = ["resources"]
            test.java.srcDirs = ["test"]
            test.resources.srcDirs = ["test-resources"]
        }
    })

    plugins.withId('org.jetbrains.kotlin.jvm', { _ ->
        sourceSets {
            main.kotlin.srcDirs = ["src"]
            test.kotlin.srcDirs = ["test"]
        }
    })
}

/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 *  You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *      http://aws.amazon.com/apache2.0/
 *
 *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 *  language governing permissions and limitations under the License.
 */

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.11' apply false
    // https://arturbosch.github.io/detekt/groovydsl.html
    id 'io.gitlab.arturbosch.detekt' version '1.4.0' apply false

}

allprojects {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = '0.8.5'
        reportsDir = file("$buildDir/reports/jacoco/")
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()    // needed for detekt
    }


}

subprojects {
    group = 'org.partiql'
    version = '0.2.5'
}

buildDir = new File(rootProject.projectDir, "gradle-build/" + project.name)

configure(subprojects.findAll { it.name != 'example' }) {
    apply plugin: 'io.gitlab.arturbosch.detekt'
    
    detekt {
        input = files("src/")
        parallel = true                                       // Builds the AST in parallel. Rules are always executed in parallel. Can lead to speedups in larger projects. `false` by default.
        debug = false                                         // Adds debug output during task execution. `false` by default.
        ignoreFailures = true                                 // If set to `true` the build does not fail when the maxIssues count was reached. Defaults to `false`.
        config = files(new File(rootProject.projectDir, "detekt-config.yml").toString())
        reports {
            html {
                enabled = true                                // Enable/Disable HTML report (default: true)
                destination = file("build/reports/detekt/detekt.html") // Path where HTML report will be stored (default: `build/reports/detekt/detekt.html`)
            }
            txt {
                enabled = false
            }
            xml {
                enabled = false
            }
        }
    }
}

subprojects {

    tasks.withType(Test) {
        maxHeapSize = "4g"
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
        useJUnitPlatform()
    }


    plugins.withId('java', { _ ->

        sourceSets {
            main.java.srcDirs = ["src"]
            main.resources.srcDirs = ["resources"]
            test.java.srcDirs = ["test"]
            test.resources.srcDirs = ["test-resources"]
        }
        

    })
    plugins.withId('org.jetbrains.kotlin.jvm', { _ ->
        def generatedVersionDir = "${buildDir}/generated-version"

        sourceSets {
            main.kotlin.srcDirs = ["src"]
            test.kotlin.srcDirs = ["test"]

            main {
                output.dir(generatedVersionDir, builtBy: 'generateVersionAndHashProperties')
            }
        }

        // generates a build properties file with the current PartiQL version and most recent commit hash
        task generateVersionAndHashProperties {
            doLast {
                def propertiesFile = file "$generatedVersionDir/partiql.properties"
                propertiesFile.parentFile.mkdirs()
                def properties = new Properties()

                // get current PartiQL version
                properties.setProperty("version", version.toString())

                // get most recent short commit hash
                def commitHash = new ByteArrayOutputStream()
                exec {
                    commandLine 'git', 'rev-parse', '--short', 'HEAD'
                    standardOutput = commitHash
                }
                properties.setProperty("commit", commitHash.toString().trim())

                propertiesFile.withWriter { properties.store(it, null) }
            }
        }
        processResources.dependsOn generateVersionAndHashProperties
    })

}


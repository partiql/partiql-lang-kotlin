/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 *  You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *      http://aws.amazon.com/apache2.0/
 *
 *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 *  language governing permissions and limitations under the License.
 */

set_default_environment::{
    personnel: [
        { first_name: "Jean Luc", last_name: "Picard" },
    ],
    ships: [
        { id: 'Enterprise', registry: "NCC-1701-D" }
    ],
    ranks: {
        commander: { first_name: "William", last_name: "Riker" }
    }
}

test::{
    id: '* with no aliases on a single table (personnel)',
    statement: "SELECT * FROM personnel",
    expected: (success (bag {
        first_name: "Jean Luc", last_name: "Picard"
    }))
}

test::{
    id: '* with no aliases on a single table (ships)',
    statement: "SELECT * FROM ships",
    expected: (success (bag {
        id: 'Enterprise', registry: "NCC-1701-D"
    })),
}

test::{
    id: '* with multiple tables',
    statement: "SELECT * FROM personnel, ships",
    expected: (success (bag {
        first_name: "Jean Luc", last_name: "Picard", id: 'Enterprise', registry: "NCC-1701-D"
    }))
}

test::{
    id: 'alias.* on a single table (personnel)',
    statement: "SELECT p.* FROM personnel AS p",
    expected: (success (bag {
        first_name: "Jean Luc", last_name: "Picard"
    }))
}

test::{
    id: 'alias.* on a single table (ships)',
    statement: "SELECT s.* FROM ships AS s",
    expected: (success (bag {
        id: 'Enterprise', registry: "NCC-1701-D"
    }))
}

test::{
    id: 'alias.* with multiple tables',
    statement: "SELECT p.*, s.* FROM ships AS s, personnel AS p",
    expected: (success (bag {
        first_name: "Jean Luc", last_name: "Picard",
        id: 'Enterprise', registry: "NCC-1701-D"
    })),
}

test::{
    id: 'Two alias.* on a single table',
    statement: "SELECT s.*, s.* FROM ships AS s",
    expected: (success (bag {
          id: 'Enterprise", registry: "NCC-1701-D',
          id: 'Enterprise', registry: "NCC-1701-D"
    }))
}

test::{
    id: 'Doubled alias.* with multiple tables',
    statement: "SELECT p.*, p.*, s.*, s.* FROM ships AS s, personnel AS p",
    expected: (success (bag {
        first_name: "Jean Luc", last_name: "Picard",
        id: 'Enterprise", registry: "NCC-1701-D',
        first_name: "Jean Luc", last_name: "Picard",
        id: 'Enterprise', registry: "NCC-1701-D"
    }))
}

test::{
    id: 'alias1.alias2.*',
    statement: "SELECT r.commander.* FROM ranks as r",
    expected: (success (bag {
        first_name: "William",
        last_name: "Riker"
    }))
}

test::{
    id: 'foo[*] is disallowed',
    statement: "SELECT foo[*] FROM foo",
    expected: (error)
}

test::{
    id: 'foo.*.bar is disallowed',
    statement: "SELECT foo.*.bar FROM foo",
    expected: (error)
}

test::{
    id: 'foo[\'a\'].* is disallowed',
    statement: "SELECT foo['a'].* FROM foo",
    expected: (error)
}

test::{
    id: 'foo[a].* is disallowed',
    statement: "SELECT foo[a].* FROM foo",
    expected: (error)
}
test::{
    id: 'foo[1].* is disallowed',
    statement: "SELECT foo[1].* FROM foo",
    expected: (error)
}

test::{
    id: 'disallowed uses of *, *',
    statement: "SELECT *, * FROM <<1>>",
    expected: (error)
}

test::{
    id: 'disallowed uses of *, alias.*',
    statement: "SELECT *, foo.* FROM <<{ a: 1 }>> as foo",
    expected: (error)
}

test::{
    id: 'disallowed uses of alias.*, *',
    statement: "SELECT foo.*, * FROM <<{ a: 1 }>> as foo",
    expected: (error)
}

test::{
    id: 'disallowed uses of <expr>, *',
    statement: "SELECT 1, * FROM <<{ a: 1 }>>",
    expected: (error)
}

test::{
    id: 'disallowed uses of *, <expr>',
    statement: "SELECT *, 1 FROM <<{ a: 1 }>>",
    expected: (error)
}
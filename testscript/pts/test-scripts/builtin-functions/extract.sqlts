/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 *  You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *      http://aws.amazon.com/apache2.0/
 *
 *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 *  language governing permissions and limitations under the License.
 */

// valid cases ----------------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            id: 'extract valid cases',
            statement: "extract(${time_part} from `${timestamp}`)",
            expected: (success $result)
        }
    ],
    variable_sets: [
        { result: 2017, time_part: "year",            timestamp: "2017T" },
        { result: 1,    time_part: "month",           timestamp: "2017T" },
        { result: 1,    time_part: "day",             timestamp: "2017T" },
        { result: 0,    time_part: "hour",            timestamp: "2017T" },
        { result: 0,    time_part: "minute",          timestamp: "2017T" },
        { result: 0,    time_part: "second",          timestamp: "2017T" },
        { result: 0,    time_part: "timezone_hour",   timestamp: "2017T" },
        { result: 0,    time_part: "timezone_minute", timestamp: "2017T" },

        // year, month
        { result: 2017, time_part: "year",            timestamp: "2017-01T" },
        { result: 1,    time_part: "month",           timestamp: "2017-01T" },
        { result: 1,    time_part: "day",             timestamp: "2017-01T" },
        { result: 0,    time_part: "hour",            timestamp: "2017-01T" },
        { result: 0,    time_part: "minute",          timestamp: "2017-01T" },
        { result: 0,    time_part: "second",          timestamp: "2017-01T" },
        { result: 0,    time_part: "timezone_hour",   timestamp: "2017-01T" },
        { result: 0,    time_part: "timezone_minute", timestamp: "2017-01T" },

        // year, month, day
        { result: 2017, time_part: "year",            timestamp: "2017-01-02T" },
        { result: 1,    time_part: "month",           timestamp: "2017-01-02T" },
        { result: 2,    time_part: "day",             timestamp: "2017-01-02T" },
        { result: 0,    time_part: "hour",            timestamp: "2017-01-02T" },
        { result: 0,    time_part: "minute",          timestamp: "2017-01-02T" },
        { result: 0,    time_part: "second",          timestamp: "2017-01-02T" },
        { result: 0,    time_part: "timezone_hour",   timestamp: "2017-01-02T" },
        { result: 0,    time_part: "timezone_minute", timestamp: "2017-01-02T" },

        // year, month, day, hour, minute
        { result: 2017, time_part: "year",            timestamp: "2017-01-02T03:04Z" },
        { result: 1,    time_part: "month",           timestamp: "2017-01-02T03:04Z" },
        { result: 2,    time_part: "day",             timestamp: "2017-01-02T03:04Z" },
        { result: 3,    time_part: "hour",            timestamp: "2017-01-02T03:04Z" },
        { result: 4,    time_part: "minute",          timestamp: "2017-01-02T03:04Z" },
        { result: 0,    time_part: "second",          timestamp: "2017-01-02T03:04Z" },
        { result: 0,    time_part: "timezone_hour",   timestamp: "2017-01-02T03:04Z" },
        { result: 0,    time_part: "timezone_minute", timestamp: "2017-01-02T03:04Z" },

        // year, month, day, hour, minute, second
        { result: 2017, time_part: "year",            timestamp: "2017-01-02T03:04:05Z" },
        { result: 1,    time_part: "month",           timestamp: "2017-01-02T03:04:05Z" },
        { result: 2,    time_part: "day",             timestamp: "2017-01-02T03:04:05Z" },
        { result: 3,    time_part: "hour",            timestamp: "2017-01-02T03:04:05Z" },
        { result: 4,    time_part: "minute",          timestamp: "2017-01-02T03:04:05Z" },
        { result: 5,    time_part: "second",          timestamp: "2017-01-02T03:04:05Z" },
        { result: 0,    time_part: "timezone_hour",   timestamp: "2017-01-02T03:04:05Z" },
        { result: 0,    time_part: "timezone_minute", timestamp: "2017-01-02T03:04:05Z" },

        // year, month, day, hour, minute, second, local offset
        { result: 2017, time_part: "year",            timestamp: "2017-01-02T03:04:05+07:08" },
        { result: 1,    time_part: "month",           timestamp: "2017-01-02T03:04:05+07:08" },
        { result: 2,    time_part: "day",             timestamp: "2017-01-02T03:04:05+07:08" },
        { result: 3,    time_part: "hour",            timestamp: "2017-01-02T03:04:05+07:08" },
        { result: 4,    time_part: "minute",          timestamp: "2017-01-02T03:04:05+07:08" },
        { result: 5,    time_part: "second",          timestamp: "2017-01-02T03:04:05+07:08" },
        { result: 7,    time_part: "timezone_hour",   timestamp: "2017-01-02T03:04:05+07:08" },
        { result: 8,    time_part: "timezone_minute", timestamp: "2017-01-02T03:04:05+07:08" },

        // negative offset
        { result: -7, time_part: "timezone_hour",   timestamp: "2017-01-02T03:04:05-07:08" },
        { result: -8, time_part: "timezone_minute", timestamp: "2017-01-02T03:04:05-07:08" }
    ]
}

// null propagation -----------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            id: 'extract null and missing propagation',
            statement: "extract(${time_part} from ${timestamp})",
            expected: (success null)
        }
    ],
    variable_sets: [
        { time_part: "year", timestamp: "null" },
        { time_part: "year", timestamp: "missing" },
    ]
}

// wrong number of arguments --------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            id: 'extract wrong number of arguments',
            statement: "${sql}",
            expected: (error)
        }
    ],

    variable_sets: [
        { sql: "extract()",                     },
        { sql: "extract(year)",                 },
        { sql: "extract(year from)",            },
        { sql: "extract(`2017T`)",              },
        { sql: "extract(from `2017T`)",         },
        { sql: "extract(year from `2017T`, 1)", },
        { sql: "extract(year, `2017T`)",        },
    ]
}

// wrong type of arguments ----------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            id: 'extract wrong type of arguments',
            statement: "extract(${first} from ${second})",
            expected: (error)
        }
    ],
    variable_sets: [
        { first: "year",   second: "1",       },
        { first: 1,        second: "`2017T`", },
    ]
}

// invalid arguments ----------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            id: 'extract invalid time part',
            statement: "extract(${time_part} from `2017T`)",
            expected: (error)
        }
    ],
    variable_sets: [
        { time_part: "foo",     tt: "IDENTIFIER", tv: foo },
        { time_part: "null",    tt: "NULL",       tv: null },
        { time_part: "missing", tt: "MISSING",    tv: null }
    ]
}

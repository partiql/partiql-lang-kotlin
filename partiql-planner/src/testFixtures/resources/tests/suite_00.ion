suite::{
  name: "suite_00",
  session: {
    catalog: "default",   // session catalog
    path: ["tpc_ds"],     // session path
    vars: {},             // session variables
  },
  tests: {
    '0000': {
      statement: '''
        SELECT ss_ticket_number, ss_quantity, ss_sold_date_sk
        FROM store_sales
      ''',
      schema: {
        type: "bag",
        items: {
          type: "struct",
          fields: [
            {
              name: "ss_ticket_number",
              type: "string",
            },
            {
              name: "ss_quantity",
              type: ["int32", "null"],
            },
            {
              name: "ss_sold_date_sk",
              type: ["date", "null"],
            },
          ],
        },
      },
    },
    '0001': {
      statement: '''
        SELECT ss_ticket_number, ss_quantity, ss_sold_date_sk
        FROM store_sales
        WHERE ss_sold_date_sk > DATE_ADD(DAY, -30, UTCNOW())
      ''',
      schema: {
        type: "bag",
        items: {
          type: "struct",
          fields: [
            {
              name: "ss_ticket_number",
              type: "string",
            },
            {
              name: "ss_quantity",
              type: ["int32", "null"],
            },
            {
              name: "ss_sold_date_sk",
              type: ["date", "null"],
            },
          ],
        },
      },
    },
    '0002': {
      statement: '''
        SELECT (ss_wholesale_cost + 10 < ss_list_price) AS x
        FROM store_sales
      ''',
      schema: {
        type: "bag",
        items: {
          type: "struct",
          fields: [
            {
              name: "x",
              type: ["bool", "null"],
            },
          ],
        },
      },
    },
    '0003': {
      statement: '''
      SELECT
        ss_quantity, -- This is a nullable int32
        CASE (ss_quantity) -- This case statement will always return a non-nullable string
          WHEN 0 THEN 'Did not sell anything!'
          WHEN 1 THEN 'Sold a single item!'
          ELSE 'Sold multiple items!'
        END AS ss_quantity_description_1,
        CASE (ss_quantity)
          WHEN 0 THEN 'Hello' -- sometimes STRING
          WHEN 1 THEN 1.0 -- sometimes DECIMAL
          WHEN 2 THEN 2 -- sometimes INT
          -- There isn't an else here, so the output should be nullable as well.
        END AS ss_quantity_description_2,
        CASE (ss_quantity)
          WHEN 0 THEN 'Hello' -- ss_quantity will be cast to an INT for comparison
          WHEN 'not an int32' THEN 'not cast-able' -- cannot be cast!
          ELSE 'fallback'
          -- There is an ELSE here, so the output should NOT be nullable.
        END AS ss_quantity_description_3
      FROM store_sales;
    ''',
      schema: {
        type: "bag",
        items: {
          type: "struct",
          fields: [
            {
              name: "ss_quantity",
              type: ["int32", "null"]
            },
            {
              name: "ss_quantity_description_1",
              type: ["string"]
            },
            {
              name: "ss_quantity_description_2",
              type: ["string", "decimal", "int", "null"]
            },
          ]
        }
      }
    },
    // TODO: Add support for SELECT * so we can assert on the schema
    '0004': {
      statement: '''
        SELECT s_store_sk
        FROM
            tpc_ds.store AS store
          LEFT JOIN
            tpc_ds.store_returns AS returns
          ON s_store_sk = sr_store_sk
      ''',
      schema: {
        type: "bag",
        items: {
          type: "struct",
          fields: [
            {
              name:"s_store_sk",
              type:"string"
            }
          ]
        }
      }
    }
  },
}

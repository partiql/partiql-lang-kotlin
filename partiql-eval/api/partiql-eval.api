public class org/partiql/eval/Environment {
	public fun <init> ()V
	public fun get (II)Lorg/partiql/spi/value/Datum;
	public fun push (Lorg/partiql/eval/Row;)Lorg/partiql/eval/Environment;
	public fun toString ()Ljava/lang/String;
}

public abstract interface class org/partiql/eval/Expr {
}

public abstract interface class org/partiql/eval/ExprRelation : java/lang/AutoCloseable, java/util/Iterator, org/partiql/eval/Expr {
	public abstract fun close ()V
	public abstract fun hasNext ()Z
	public synthetic fun next ()Ljava/lang/Object;
	public abstract fun next ()Lorg/partiql/eval/Row;
	public abstract fun open (Lorg/partiql/eval/Environment;)V
	public fun remove ()V
}

public abstract interface class org/partiql/eval/ExprValue : org/partiql/eval/Expr {
	public abstract fun eval (Lorg/partiql/eval/Environment;)Lorg/partiql/spi/value/Datum;
}

public class org/partiql/eval/Mode : org/partiql/spi/Enum {
	public static final field PERMISSIVE I
	public static final field STRICT I
	public static fun PERMISSIVE ()Lorg/partiql/eval/Mode;
	public static fun STRICT ()Lorg/partiql/eval/Mode;
	public fun name ()Ljava/lang/String;
}

public class org/partiql/eval/Row {
	public fun <init> ()V
	public fun <init> ([Lorg/partiql/spi/value/Datum;)V
	public fun concat (Lorg/partiql/eval/Row;)Lorg/partiql/eval/Row;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getValues ()[Lorg/partiql/spi/value/Datum;
	public fun hashCode ()I
	public static fun of ([Lorg/partiql/spi/value/Datum;)Lorg/partiql/eval/Row;
	public fun toString ()Ljava/lang/String;
}

public abstract interface class org/partiql/eval/Statement {
	public abstract fun execute ()Lorg/partiql/spi/value/Datum;
}

public abstract interface class org/partiql/eval/WindowFunction {
	public abstract fun eval (Lorg/partiql/eval/Environment;JJ)Lorg/partiql/spi/value/Datum;
	public abstract fun reset (Lorg/partiql/eval/WindowPartition;)V
}

public abstract interface class org/partiql/eval/WindowPartition {
	public abstract fun get (J)Lorg/partiql/eval/Row;
	public abstract fun size ()J
}

public class org/partiql/eval/compiler/Match {
	public fun <init> (Lorg/partiql/plan/Operand;)V
	public fun getOperand ()Lorg/partiql/plan/Operand;
}

public abstract interface class org/partiql/eval/compiler/PartiQLCompiler {
	public static fun builder ()Lorg/partiql/eval/compiler/PartiQLCompiler$Builder;
	public fun prepare (Lorg/partiql/plan/Plan;Lorg/partiql/eval/Mode;)Lorg/partiql/eval/Statement;
	public abstract fun prepare (Lorg/partiql/plan/Plan;Lorg/partiql/eval/Mode;Lorg/partiql/spi/Context;)Lorg/partiql/eval/Statement;
	public static fun standard ()Lorg/partiql/eval/compiler/PartiQLCompiler;
}

public class org/partiql/eval/compiler/PartiQLCompiler$Builder {
	public fun addStrategy (Lorg/partiql/eval/compiler/Strategy;)Lorg/partiql/eval/compiler/PartiQLCompiler$Builder;
	public fun build ()Lorg/partiql/eval/compiler/PartiQLCompiler;
}

public class org/partiql/eval/compiler/Pattern {
	public fun <init> (Ljava/lang/Class;)V
	protected fun <init> (Ljava/lang/Class;Ljava/util/function/Predicate;)V
	public fun matches (Lorg/partiql/plan/Operator;)Z
}

public abstract class org/partiql/eval/compiler/Strategy {
	public fun <init> (Lorg/partiql/eval/compiler/Pattern;)V
	public abstract fun apply (Lorg/partiql/eval/compiler/Match;Lorg/partiql/eval/Mode;Lorg/partiql/eval/compiler/Strategy$Callback;)Lorg/partiql/eval/Expr;
	public fun getPattern ()Lorg/partiql/eval/compiler/Pattern;
}

public abstract interface class org/partiql/eval/compiler/Strategy$Callback {
	public abstract fun apply (Lorg/partiql/plan/Operator;)Lorg/partiql/eval/Expr;
}


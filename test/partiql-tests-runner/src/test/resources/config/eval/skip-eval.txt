// TODO: Alias tests. Needed for V1 release.
PERMISSIVE:::testing alias support
STRICT:::testing alias support
PERMISSIVE:::testing nested alias support
STRICT:::testing nested alias support
PERMISSIVE:::group and order by count
STRICT:::group and order by count

// TODO: Arithmetic tests. Needed for V1 release.
PERMISSIVE:::division with mixed StaticType
STRICT:::division with mixed StaticType
PERMISSIVE:::repeatingDecimal
STRICT:::repeatingDecimal
PERMISSIVE:::repeatingDecimalHigherPrecision
STRICT:::repeatingDecimalHigherPrecision
PERMISSIVE:::divDecimalInt
STRICT:::divDecimalInt
PERMISSIVE:::subtractionOutOfAllowedPrecision
STRICT:::subtractionOutOfAllowedPrecision

// TODO: Undefined variable tests. Needed for V1 release.
PERMISSIVE:::GROUP BY binding referenced in FROM clause
PERMISSIVE:::GROUP BY binding referenced in WHERE clause
PERMISSIVE:::GROUP AS binding referenced in FROM clause
PERMISSIVE:::GROUP AS binding referenced in WHERE clause
PERMISSIVE:::GROUP BY with JOIN : SELECT supplierName, COUNT(*) as the_count FROM suppliers AS s INNER JOIN products AS p ON s.supplierId = p.supplierId GROUP BY supplierName
STRICT:::GROUP BY with JOIN : SELECT supplierName, COUNT(*) as the_count FROM suppliers AS s INNER JOIN products AS p ON s.supplierId = p.supplierId GROUP BY supplierName
PERMISSIVE:::SELECT col1, g FROM simple_1_col_1_group, join_me GROUP BY col1 GROUP AS g
STRICT:::SELECT col1, g FROM simple_1_col_1_group, join_me GROUP BY col1 GROUP AS g
PERMISSIVE:::SELECT VALUE { 'col1': col1, 'g': g } FROM simple_1_col_1_group, join_me GROUP BY col1 GROUP AS g
STRICT:::SELECT VALUE { 'col1': col1, 'g': g } FROM simple_1_col_1_group, join_me GROUP BY col1 GROUP AS g
PERMISSIVE:::SELECT col1, g FROM simple_1_col_1_group, different_types_per_row GROUP BY col1 GROUP AS g
STRICT:::SELECT col1, g FROM simple_1_col_1_group, different_types_per_row GROUP BY col1 GROUP AS g
PERMISSIVE:::SELECT VALUE { 'col1': col1, 'g': g } FROM simple_1_col_1_group, different_types_per_row GROUP BY col1 GROUP AS g
STRICT:::SELECT VALUE { 'col1': col1, 'g': g } FROM simple_1_col_1_group, different_types_per_row GROUP BY col1 GROUP AS g
PERMISSIVE:::select fld3,period from t1,t2 where fld1 = 011401
PERMISSIVE:::select fld3,period from t2,t1 where companynr*10 = 37*10
PERMISSIVE:::MYSQL_SELECT_20
STRICT:::MYSQL_SELECT_20
PERMISSIVE:::MYSQL_SELECT_21
STRICT:::MYSQL_SELECT_21

// TODO: Negative offset. Needed for V1 release.
PERMISSIVE:::offset -1
STRICT:::offset -1
STRICT:::offset 1-2

// TODO: Mistyped Coll Aggs. Needed for V1 release.
STRICT:::COLL_MAX non-collection
STRICT:::COLL_AVG non-collection
STRICT:::COLL_COUNT non-collection
STRICT:::COLL_SUM non-collection
STRICT:::COLL_MIN non-collection
STRICT:::COLL_ANY non-collection
STRICT:::COLL_SOME non-collection
STRICT:::COLL_EVERY non-collection

// TODO: Mistyped functions. Needed for V1 release.
STRICT:::MOD(MISSING, 'some string')
STRICT:::MOD('some string', MISSING)
STRICT:::MOD(NULL, 'some string')
STRICT:::MOD('some string', NULL)
STRICT:::MOD(3, 'some string')
STRICT:::MOD('some string', 3)
STRICT:::CARDINALITY('foo') type mismatch
STRICT:::OCTET_LENGTH invalid type
STRICT:::CHARACTER_LENGTH invalid type
STRICT:::ABS('foo')
STRICT:::POSITION invalid type in string
STRICT:::POSITION string in invalid type
STRICT:::BIT_LENGTH invalid type

// TODO: Invalid casts. Needed for V1 release.
STRICT:::cast to int invalid target type{value:"[1, 2]",target:"LIST"}
STRICT:::cast to int invalid target type{value:"[1]",target:"LIST"}
STRICT:::cast to int invalid target type{value:"[]",target:"LIST"}
STRICT:::cast to int invalid target type{value:"{'a': 1}",target:"STRUCT"}
STRICT:::cast to int invalid target type{value:"{'a': '12'}",target:"STRUCT"}
STRICT:::cast to int invalid target type{value:"{}",target:"STRUCT"}
STRICT:::cast to int invalid target type{value:"<<1, 2>>",target:"BAG"}
STRICT:::cast to int invalid target type{value:"<<1>>",target:"BAG"}
STRICT:::cast to int invalid target type{value:"<<>>",target:"BAG"}

// TODO: Special forms. Needed for V1 release.
PERMISSIVE:::More than one character given for ESCAPE
STRICT:::LIKE bad value type
STRICT:::LIKE bad pattern type
STRICT:::LIKE bad escape type

// TODO: Bag ops. Needed for V1 release.
PERMISSIVE:::Example 6 - Value Coercion not union-compatible
STRICT:::Example 6 - Value Coercion not union-compatible

// TODO: Operators. Needed for V1 release.
STRICT:::data type mismatch in comparison expression

// TODO: Sexp tests. Needed for V1 release.
PERMISSIVE:::projectOfSexp
STRICT:::projectOfSexp

// TODO: Miscellaneous. Needed for V1 release.
STRICT:::invalid extract year from time
STRICT:::invalid extract month from time
STRICT:::invalid extract day from time
STRICT:::invalid extract month from time with time zone
STRICT:::invalid extract day from time with time zone

// TODO: GPML. Not needed for V1 release.
PERMISSIVE:::Right with variables
STRICT:::Right with variables
PERMISSIVE:::Right with spots
STRICT:::Right with spots
PERMISSIVE:::Right shorthand
STRICT:::Right shorthand
PERMISSIVE:::Left with variables
STRICT:::Left with variables
PERMISSIVE:::Left with spots
STRICT:::Left with spots
PERMISSIVE:::Left shorthand
STRICT:::Left shorthand
PERMISSIVE:::Left+right with variables
STRICT:::Left+right with variables
PERMISSIVE:::Left+right with spots
STRICT:::Left+right with spots
PERMISSIVE:::Left+right shorthand
STRICT:::Left+right shorthand
PERMISSIVE:::Left+right with variables and label
STRICT:::Left+right with variables and label
PERMISSIVE:::Undirected with variables
STRICT:::Undirected with variables
PERMISSIVE:::Undirected with spots
STRICT:::Undirected with spots
PERMISSIVE:::Undirected shorthand
STRICT:::Undirected shorthand
PERMISSIVE:::Undirected with variables and label
STRICT:::Undirected with variables and label
PERMISSIVE:::Right+undirected with variables
STRICT:::Right+undirected with variables
PERMISSIVE:::Right+undirected with spots
STRICT:::Right+undirected with spots
PERMISSIVE:::Right+undirected shorthand
STRICT:::Right+undirected shorthand
PERMISSIVE:::Right+undirected with variables and labels
STRICT:::Right+undirected with variables and labels
PERMISSIVE:::Left+undirected with variables
STRICT:::Left+undirected with variables
PERMISSIVE:::Left+undirected with spots
STRICT:::Left+undirected with spots
PERMISSIVE:::Left+undirected shorthand
STRICT:::Left+undirected shorthand
PERMISSIVE:::Left+undirected with variables and label
STRICT:::Left+undirected with variables and label
PERMISSIVE:::Left+right+undirected with variables
STRICT:::Left+right+undirected with variables
PERMISSIVE:::Left+right+undirected with spots
STRICT:::Left+right+undirected with spots
PERMISSIVE:::Left+right+undirected shorthand
STRICT:::Left+right+undirected shorthand
PERMISSIVE:::(N0E0 MATCH (x))
STRICT:::(N0E0 MATCH (x))
PERMISSIVE:::(N0E0 MATCH -[y]-> )
STRICT:::(N0E0 MATCH -[y]-> )
PERMISSIVE:::(N0E0 MATCH (x)-[y]->(z) )
STRICT:::(N0E0 MATCH (x)-[y]->(z) )
PERMISSIVE:::(N1E0 MATCH (x))
STRICT:::(N1E0 MATCH (x))
PERMISSIVE:::(N1E0 MATCH -[y]-> )
STRICT:::(N1E0 MATCH -[y]-> )
PERMISSIVE:::(N1E0 MATCH (x)-[y]->(z) )
STRICT:::(N1E0 MATCH (x)-[y]->(z) )
PERMISSIVE:::(N1E0 MATCH (x)-[y]->(x) )
STRICT:::(N1E0 MATCH (x)-[y]->(x) )
PERMISSIVE:::(N1U1 MATCH (x))
STRICT:::(N1U1 MATCH (x))
PERMISSIVE:::(N1U1 MATCH ~[y]~ )
STRICT:::(N1U1 MATCH ~[y]~ )
PERMISSIVE:::(N1U1 MATCH (x)~[y]~(z) )
STRICT:::(N1U1 MATCH (x)~[y]~(z) )
PERMISSIVE:::(N1U1 MATCH (x)~[y]~(x) )
STRICT:::(N1U1 MATCH (x)~[y]~(x) )
PERMISSIVE:::(N1U1 MATCH (x1)~[y1]~(x2)~[y2]~(x3) )
STRICT:::(N1U1 MATCH (x1)~[y1]~(x2)~[y2]~(x3) )
PERMISSIVE:::(N1D2 MATCH (x))
STRICT:::(N1D2 MATCH (x))
PERMISSIVE:::(N1D2 MATCH -[y]-> )
STRICT:::(N1D2 MATCH -[y]-> )
PERMISSIVE:::(N1D2 MATCH (x)-[y]->(z) )
STRICT:::(N1D2 MATCH (x)-[y]->(z) )
PERMISSIVE:::(N1D2 MATCH (x)-[y]->(x) )
STRICT:::(N1D2 MATCH (x)-[y]->(x) )
PERMISSIVE:::(N1D2 MATCH (x1)-[y1]->(x2)-[y2]->(x3) )
STRICT:::(N1D2 MATCH (x1)-[y1]->(x2)-[y2]->(x3) )
PERMISSIVE:::(N2E0 MATCH (x))
STRICT:::(N2E0 MATCH (x))
PERMISSIVE:::(N2E0 MATCH -[y]-> )
STRICT:::(N2E0 MATCH -[y]-> )
PERMISSIVE:::(N2E0 MATCH (x)-[y]->(z) )
STRICT:::(N2E0 MATCH (x)-[y]->(z) )
PERMISSIVE:::(N2E0 MATCH (x)-[y]->(x) )
STRICT:::(N2E0 MATCH (x)-[y]->(x) )
PERMISSIVE:::(N2D1 MATCH (x))
STRICT:::(N2D1 MATCH (x))
PERMISSIVE:::(N2D1 MATCH -[y]-> )
STRICT:::(N2D1 MATCH -[y]-> )
PERMISSIVE:::(N2D1 MATCH (x)-[y]->(z) )
STRICT:::(N2D1 MATCH (x)-[y]->(z) )
PERMISSIVE:::(N2D1 MATCH (x)-[y]->(x) )
STRICT:::(N2D1 MATCH (x)-[y]->(x) )
PERMISSIVE:::(N2D1 MATCH (x1)-[y1]->(x2)-[y2]->(x3) )
STRICT:::(N2D1 MATCH (x1)-[y1]->(x2)-[y2]->(x3) )
PERMISSIVE:::(N2D1 MATCH (x1)-[y1]->(x2)-[y2]-(x3) )
STRICT:::(N2D1 MATCH (x1)-[y1]->(x2)-[y2]-(x3) )
PERMISSIVE:::(N2D1 MATCH (x1)-[y1]-(x2)-[y2]->(x3) )
STRICT:::(N2D1 MATCH (x1)-[y1]-(x2)-[y2]->(x3) )
PERMISSIVE:::(N2D1 MATCH (x1)-[y1]-(x2)-[y2]-(x3) )
STRICT:::(N2D1 MATCH (x1)-[y1]-(x2)-[y2]-(x3) )
PERMISSIVE:::(N2U1 MATCH (x))
STRICT:::(N2U1 MATCH (x))
PERMISSIVE:::(N2U1 MATCH ~[y]~ )
STRICT:::(N2U1 MATCH ~[y]~ )
PERMISSIVE:::(N2U1 MATCH (x)~[y]~(z) )
STRICT:::(N2U1 MATCH (x)~[y]~(z) )
PERMISSIVE:::(N2U1 MATCH (x)~[y]~(x) )
STRICT:::(N2U1 MATCH (x)~[y]~(x) )
PERMISSIVE:::(N2U1 MATCH (x1)~[y1]~(x2)~[y2]~(x3) )
STRICT:::(N2U1 MATCH (x1)~[y1]~(x2)~[y2]~(x3) )
PERMISSIVE:::(N2U1 MATCH (x1)~[y1]~(x2)-[y2]-(x3) )
STRICT:::(N2U1 MATCH (x1)~[y1]~(x2)-[y2]-(x3) )
PERMISSIVE:::(N2U1 MATCH (x1)-[y1]-(x2)~[y2]~(x3) )
STRICT:::(N2U1 MATCH (x1)-[y1]-(x2)~[y2]~(x3) )
PERMISSIVE:::(N2U1 MATCH (x1)-[y1]-(x2)-[y2]-(x3) )
STRICT:::(N2U1 MATCH (x1)-[y1]-(x2)-[y2]-(x3) )
PERMISSIVE:::(N2D2 MATCH (x))
STRICT:::(N2D2 MATCH (x))
PERMISSIVE:::(N2D2 MATCH -[y]-> )
STRICT:::(N2D2 MATCH -[y]-> )
PERMISSIVE:::(N2D2 MATCH (x)-[y]->(z) )
STRICT:::(N2D2 MATCH (x)-[y]->(z) )
PERMISSIVE:::(N2D2 MATCH (x)-[y]->(x) )
STRICT:::(N2D2 MATCH (x)-[y]->(x) )
PERMISSIVE:::(N2D2 MATCH (x1)-[y1]->(x2)-[y2]->(x3) )
STRICT:::(N2D2 MATCH (x1)-[y1]->(x2)-[y2]->(x3) )
PERMISSIVE:::(N2D2 MATCH (x1)-[y1]->(x2)-[y2]-(x3) )
STRICT:::(N2D2 MATCH (x1)-[y1]->(x2)-[y2]-(x3) )
PERMISSIVE:::(N2D2 MATCH (x1)-[y1]-(x2)-[y2]->(x3) )
STRICT:::(N2D2 MATCH (x1)-[y1]-(x2)-[y2]->(x3) )
PERMISSIVE:::(N2D2 MATCH (x1)-[y1]-(x2)-[y2]-(x3) )
STRICT:::(N2D2 MATCH (x1)-[y1]-(x2)-[y2]-(x3) )
PERMISSIVE:::(N2D2c MATCH (x))
STRICT:::(N2D2c MATCH (x))
PERMISSIVE:::(N2D2c MATCH -[y]-> )
STRICT:::(N2D2c MATCH -[y]-> )
PERMISSIVE:::(N2D2c MATCH (x)-[y]->(z) )
STRICT:::(N2D2c MATCH (x)-[y]->(z) )
PERMISSIVE:::(N2D2c MATCH (x)-[y]->(x) )
STRICT:::(N2D2c MATCH (x)-[y]->(x) )
PERMISSIVE:::(N2D2c MATCH (x1)-[y1]->(x2)-[y2]->(x3) )
STRICT:::(N2D2c MATCH (x1)-[y1]->(x2)-[y2]->(x3) )
PERMISSIVE:::(N2D2c MATCH (x1)-[y1]->(x2)-[y2]->(x1) )
STRICT:::(N2D2c MATCH (x1)-[y1]->(x2)-[y2]->(x1) )
PERMISSIVE:::(N2D2c MATCH (x1)-[y1]->(x2)-[y2]-(x3) )
STRICT:::(N2D2c MATCH (x1)-[y1]->(x2)-[y2]-(x3) )
PERMISSIVE:::(N2D2c MATCH (x1)-[y1]-(x2)-[y2]->(x3) )
STRICT:::(N2D2c MATCH (x1)-[y1]-(x2)-[y2]->(x3) )
PERMISSIVE:::(N2D2c MATCH (x1)-[y1]-(x2)-[y2]-(x3) )
STRICT:::(N2D2c MATCH (x1)-[y1]-(x2)-[y2]-(x3) )
PERMISSIVE:::(N2U2 MATCH (x))
STRICT:::(N2U2 MATCH (x))
PERMISSIVE:::(N2U2 MATCH ~[y]~ )
STRICT:::(N2U2 MATCH ~[y]~ )
PERMISSIVE:::(N2U2 MATCH (x)~[y]~(z) )
STRICT:::(N2U2 MATCH (x)~[y]~(z) )
PERMISSIVE:::(N2U2 MATCH (x)~[y]~(x) )
STRICT:::(N2U2 MATCH (x)~[y]~(x) )
PERMISSIVE:::(N2U2 MATCH (x1)~[y1]~(x2)~[y2]~(x3) )
STRICT:::(N2U2 MATCH (x1)~[y1]~(x2)~[y2]~(x3) )
PERMISSIVE:::(N2U2 MATCH (x1)~[y1]~(x2)~[y2]~(x1) )
STRICT:::(N2U2 MATCH (x1)~[y1]~(x2)~[y2]~(x1) )

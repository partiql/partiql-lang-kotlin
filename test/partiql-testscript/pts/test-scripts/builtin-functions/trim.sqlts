/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 *  You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *      http://aws.amazon.com/apache2.0/
 *
 *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 *  language governing permissions and limitations under the License.
 */




// valid cases ----------------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            id: 'trim valid cases',
            statement: "trim(${spec} '${to_remove}' from '${target}')",
            expected: (success $result)
        }
    ],
    variable_sets: [
        { spec: "both",     to_remove: "💩", target: "💩💩💩💩😁💩💩💩💩", result: "😁" },
        { spec: "leading",  to_remove: "💩", target: "💩💩💩💩😁💩💩💩💩", result: "😁💩💩💩💩" },
        { spec: "trailing", to_remove: "💩", target: "💩💩💩💩😁💩💩💩💩", result: "💩💩💩💩😁" },

        { spec: "both",     to_remove: "12", target: "111112a1212121211", result: "a" },
        { spec: "leading",  to_remove: "12", target: "111112a1212121211", result: "a1212121211" },
        { spec: "trailing", to_remove: "12", target: "111112a1212121211", result: "111112a" },

        { spec: "both",     to_remove: "💩😸", target: "💩💩💩😸😸😸1💩💩💩😸😸😸a💩💩💩😸😸😸1💩💩💩😸😸😸", result: "1💩💩💩😸😸😸a💩💩💩😸😸😸1" },
        { spec: "leading",  to_remove: "💩😸", target: "💩💩💩😸😸😸1💩💩💩😸😸😸a💩💩💩😸😸😸1💩💩💩😸😸😸", result: "1💩💩💩😸😸😸a💩💩💩😸😸😸1💩💩💩😸😸😸" },
        { spec: "trailing", to_remove: "💩😸", target: "💩💩💩😸😸😸1💩💩💩😸😸😸a💩💩💩😸😸😸1💩💩💩😸😸😸", result: "💩💩💩😸😸😸1💩💩💩😸😸😸a💩💩💩😸😸😸1" },

        { spec: "both",     to_remove: "話 ", target: "話話 話話話話話話費谷料村能話話話話 話話話話    ", result: "費谷料村能" },
        { spec: "leading",  to_remove: "話 ", target: "話話 話話話話話話費谷料村能話話話話 話話話話    ", result: "費谷料村能話話話話 話話話話    " },
        { spec: "trailing", to_remove: "話 ", target: "話話 話話話話話話費谷料村能話話話話 話話話話    ", result: "話話 話話話話話話費谷料村能" },

        { spec: "both",     to_remove: "°º□(）)╯ノ︵_ ", target: "(╯°□°）╯︵ ┻━┻ ┬─┬ノ( º _ ºノ)", result: "┻━┻ ┬─┬" },
        { spec: "leading",  to_remove: "°º□(）)╯ノ︵_ ", target: "(╯°□°）╯︵ ┻━┻ ┬─┬ノ( º _ ºノ)", result: "┻━┻ ┬─┬ノ( º _ ºノ)" },
        { spec: "trailing", to_remove: "°º□(）)╯ノ︵_ ", target: "(╯°□°）╯︵ ┻━┻ ┬─┬ノ( º _ ºノ)", result: "(╯°□°）╯︵ ┻━┻ ┬─┬" },

        { spec: "both",     to_remove: "👶🏻", target: "👶🏻👩👶🏻", result: "👩" },
        { spec: "leading",  to_remove: "👶🏻", target: "👶🏻👩👶🏻", result: "👩👶🏻" },
        { spec: "trailing", to_remove: "👶🏻", target: "👶🏻👩👶🏻", result: "👶🏻👩" },

        { spec: "both",     to_remove: " ", target: "            ", result: "" },
        { spec: "leading",  to_remove: " ", target: "            ", result: "" },
        { spec: "trailing", to_remove: " ", target: "            ", result: "" },
    ]
}

// variations on valid syntax ------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            id: 'trim variations on valid syntax',
            statement: "${sql}",
            expected: (success "foobar")
        }
    ],
    variable_sets: [
        { sql: "trim('      foobar       ')" },
        { sql: "trim(from '      foobar       ')" },
        { sql: "trim(both from '      foobar       ')" },
        { sql: "trim(both ' ' from '      foobar       ')" },

        { sql: "trim('12' from '1212foobar1212')" },
        { sql: "trim('12' from 'foobar1212')" },
        { sql: "trim('12' from '1212foobar')" },
    ]
}

// null propagation -----------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            id: 'trim null and missing propagation',
            statement: "${sql}",
            expected: (success null)
        }
    ],
    variable_sets: [
        { sql: "trim(null)",    },
        { sql: "trim(missing)", },

        { sql: "trim(leading from null)",  },
        { sql: "trim(trailing from null)", },
        { sql: "trim(both from null)",     },

        { sql: "trim(leading from missing)",  },
        { sql: "trim(trailing from missing)", },
        { sql: "trim(both from missing)",     },

        { sql: "trim(leading '' from null)",  },
        { sql: "trim(trailing '' from null)", },
        { sql: "trim(both '' from null)",     },

        { sql: "trim(leading '' from missing)",  },
        { sql: "trim(trailing '' from missing)", },
        { sql: "trim(both '' from missing)",     },

        { sql: "trim(leading null from '')",  },
        { sql: "trim(trailing null from '')", },
        { sql: "trim(both null from '')",     },

        { sql: "trim(leading missing from '')",  },
        { sql: "trim(trailing missing from '')", },
        { sql: "trim(both missing from '')",     },

        { sql: "trim(leading null from missing)",  },
        { sql: "trim(trailing null from missing)", },
        { sql: "trim(both null from missing)",     },

        { sql: "trim(leading missing from null)",  },
        { sql: "trim(trailing missing from null)", },
        { sql: "trim(both missing from null)",     },

        { sql: "trim(leading null from null)",  },
        { sql: "trim(trailing null from null)", },
        { sql: "trim(both null from null)",     },

        { sql: "trim(leading missing from missing)",  },
        { sql: "trim(trailing missing from missing)", },
        { sql: "trim(both missing from missing)",     },
    ]
}

// wrong syntax --------------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            id: 'trim wrong number of arguments',
            statement: "${sql}",
            expected: (error)
        }
    ],

    variable_sets: [
        { sql: "trim()",               },
        { sql: "trim('', '')",         },
        { sql: "trim(leading '')",     },
        { sql: "trim(foobar from '')", },
    ]
}

// wrong type of arguments ----------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            id: 'trim wrong number of arguments',
            statement: "trim(${spec} ${to_remove} from ${target})",
            expected:(error)
        }
    ],

    variable_sets: [
        { spec: "1",        to_remove: "''",      target: "''",     },
        { spec: "foobar",   to_remove: "''",      target: "''",     },
        { spec: "'foobar'", to_remove: "''",      target: "''",     },
        { spec: "leading",  to_remove: "1",       target: "''",     },
        { spec: "leading",  to_remove: "foobar",  target: "''",     },
        { spec: "leading",  to_remove: "''",      target: "1",      },
        { spec: "leading",  to_remove: "''",      target: "foobar", },
    ]
}


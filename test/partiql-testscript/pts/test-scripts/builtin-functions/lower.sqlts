/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 *  You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *      http://aws.amazon.com/apache2.0/
 *
 *  or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 *  language governing permissions and limitations under the License.
 */

// valid cases ----------------------------------------------------------------------------------------------------

for::{
    template: [
        test::{
            id: 'lower valid cases',
            statement: "lower('${in}')",
            expected: (success $result)
        }
    ],
    variable_sets: [

        // Basic Latin
        {
            in:     ''' !"#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~''',
            result: ''' !"#$%&()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'''
        },

        // Latin-1 Supplement
        {
            in:     "¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ",
            result: "¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿àáâãäåæçèéêëìíîïðñòóôõö×øùúûüýþàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
        },

        // Latin Extended A
        {
            in:     "ĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłŃńŅņŇňŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽž",
            result: "āāăăąąććĉĉċċččďďđđēēĕĕėėęęěěĝĝğğġġģģĥĥħħĩĩīīĭĭįįi̇ıĳĳĵĵķķĸĺĺļļľľŀŀłłńńņņňňŋŋōōŏŏőőœœŕŕŗŗřřśśŝŝşşššţţťťŧŧũũūūŭŭůůűűųųŵŵŷŷÿźźżżžž"
        },

        // Latin Extended B
        {
            in:      "ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏƐƑƒƓƔƕƖƗƘƙƚƛƜƝƞƟƠơƢƣƤƥƦƧƨƩƪƫƬƭƮƯưƱƲƳƴƵƶƷƸƹƺƻƼƽƾƿǀǁǂǃǄǅǆǇǈǉǊǋǌǍǎǏǐǑǒǓǔǕǖǗǘǙǚǛǜǝǞǟǠǡǢǣǤǥǦǧǨǩǪǫǬǭǮǯǰǱǲǳǴǵǶǷǸǹǺǻǼǽǾǿȀȁȂȃȄȅȆȇȈȉȊȋȌȍȎȏȐȑȒȓȔȕȖȗȘșȚțȜȝȞȟȠȡȢȣȤȥȦȧȨȩȪȫȬȭȮȯȰȱȲȳȴȵȶȷȸȹȺȻȼȽȾȿɀɁɂɃɄɅɆɇɈɉɊɋɌɍɎɏ",
            result: "ƀɓƃƃƅƅɔƈƈɖɗƌƌƍǝəɛƒƒɠɣƕɩɨƙƙƚƛɯɲƞɵơơƣƣƥƥʀƨƨʃƪƫƭƭʈưưʊʋƴƴƶƶʒƹƹƺƻƽƽƾƿǀǁǂǃǆǆǆǉǉǉǌǌǌǎǎǐǐǒǒǔǔǖǖǘǘǚǚǜǜǝǟǟǡǡǣǣǥǥǧǧǩǩǫǫǭǭǯǯǰǳǳǳǵǵƕƿǹǹǻǻǽǽǿǿȁȁȃȃȅȅȇȇȉȉȋȋȍȍȏȏȑȑȓȓȕȕȗȗșșțțȝȝȟȟƞȡȣȣȥȥȧȧȩȩȫȫȭȭȯȯȱȱȳȳȴȵȶȷȸȹⱥȼȼƚⱦȿɀɂɂƀʉʌɇɇɉɉɋɋɍɍɏɏ"
        },

        // Latin Extended C
        {
            in:     "ⱠⱡⱢⱣⱤⱥⱦⱧⱨⱩⱪⱫⱬⱭⱮⱯⱰⱱⱲⱳⱴⱵⱶⱷⱸⱹⱺⱻⱼⱽⱾⱿ",
            result: "ⱡⱡɫᵽɽⱥⱦⱨⱨⱪⱪⱬⱬɑɱɐɒⱱⱳⱳⱴⱶⱶⱷⱸⱹⱺⱻⱼⱽȿɀ"
        },

        // FIXME Some characters have weird behavior, for example ß `"ß".toLowerCase().toUpperCase() == "SS"`.
        // TODO all other UTF-8 blocks

        // other alphabets
        {
                in: "話家身圧費谷料村能計税金ぁてトキほッΔϕξΑ",
            result: "話家身圧費谷料村能計税金ぁてトキほッδϕξα"
        },

        // from https://github.com/minimaxir/big-list-of-naughty-strings.
        // Not all were used as some are context specific, e.g. XSS attacks
        { in: "undefined",      result: "undefined"},
        { in: "undef",          result: "undef"},
        { in: "null",           result: "null"},
        { in: "NULL",           result: "null"},
        { in: "(null)",         result: "(null)"},
        { in: "nil",            result: "nil"},
        { in: "NIL",            result: "nil"},
        { in: "true",           result: "true"},
        { in: "false",          result: "false"},
        { in: "True",           result: "true"},
        { in: "False",          result: "false"},
        { in: "TRUE",           result: "true"},
        { in: "FALSE",          result: "false"},
        { in: "None",           result: "none"},
        { in: "hasOwnProperty", result: "hasownproperty"},

        { 
            in:     "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", 
            result: "999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999" 
        },
        
        { 
            in:     "123456789012345678901234567890123456789", 
            result: "123456789012345678901234567890123456789" 
        },
        
        { in: "0",                       result: "0" },
        { in: "1",                       result: "1" },
        { in: "1.00",                    result: "1.00" },
        { in: "$1.00",                   result: "$1.00" },
        { in: "1/2",                     result: "1/2" },
        { in: "1E2",                     result: "1e2" },
        { in: "1E02",                    result: "1e02" },
        { in: "1E+02",                   result: "1e+02" },
        { in: "-1",                      result: "-1" },
        { in: "-1.00",                   result: "-1.00" },
        { in: "-$1.00",                  result: "-$1.00" },
        { in: "-1/2",                    result: "-1/2" },
        { in: "-1E2",                    result: "-1e2" },
        { in: "-1E02",                   result: "-1e02" },
        { in: "-1E+02",                  result: "-1e+02" },
        { in: "1/0",                     result: "1/0" },
        { in: "0/0",                     result: "0/0" },
        { in: "-2147483648/-1",          result: "-2147483648/-1" },
        { in: "-9223372036854775808/-1", result: "-9223372036854775808/-1" },
        { in: "-0",                      result: "-0" },
        { in: "-0.0",                    result: "-0.0" },
        { in: "+0",                      result: "+0" },
        { in: "+0.0",                    result: "+0.0" },
        { in: "0.00",                    result: "0.00" },
        { in: "0..0",                    result: "0..0" },
        { in: ".",                       result: "." },
        { in: "0.0.0",                   result: "0.0.0" },
        { in: "0,00",                    result: "0,00" },
        { in: "0,,0",                    result: "0,,0" },
        { in: ",",                       result: "," },
        { in: "0,0,0",                   result: "0,0,0" },
        { in: "0.0/0",                   result: "0.0/0" },
        { in: "1.0/0.0",                 result: "1.0/0.0" },
        { in: "0.0/0.0",                 result: "0.0/0.0" },
        { in: "1,0/0,0",                 result: "1,0/0,0" },
        { in: "0,0/0,0",                 result: "0,0/0,0" },
        { in: "--1",                     result: "--1" },
        { in: "-",                       result: "-" },
        { in: "-.",                      result: "-." },
        { in: "-,",                      result: "-," },
        { in: "NaN",                     result: "nan" },
        { in: "Infinity",                result: "infinity" },
        { in: "-Infinity",               result: "-infinity" },
        { in: "INF",                     result: "inf" },
        { in: "1#INF",                   result: "1#inf" },
        { in: "-1#IND",                  result: "-1#ind" },
        { in: "1#QNAN",                  result: "1#qnan" },
        { in: "1#SNAN",                  result: "1#snan" },
        { in: "1#IND",                   result: "1#ind" },
        { in: "0x0",                     result: "0x0" },
        { in: "0xffffffff",              result: "0xffffffff" },
        { in: "0xffffffffffffffff",      result: "0xffffffffffffffff" },
        { in: "0xabad1dea",              result: "0xabad1dea" },
        { in: "1,000.00",                result: "1,000.00" },
        { in: "1 000.00",                result: "1 000.00" },

        { in: "1,000,000.00",            result: "1,000,000.00" },
        { in: "1 000 000.00",            result: "1 000 000.00" },
        { in: "1.000,00",                result: "1.000,00" },
        { in: "1 000,00",                result: "1 000,00" },
        { in: "1.000.000,00",            result: "1.000.000,00" },
        { in: "1 000 000,00",            result: "1 000 000,00" },
        { in: "01000",                   result: "01000" },
        { in: "08",                      result: "08" },
        { in: "09",                      result: "09" },
        { in: "2.2250738585072011e-308", result: "2.2250738585072011e-308" },

        {
            in:     "ЁЂЃЄЅІЇЈЉЊЋЌЍЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя",
            result: "ёђѓєѕіїјљњћќѝўџабвгдежзийклмнопрстуфхцчшщъыьэюяабвгдежзийклмнопрстуфхцчшщъыьэюя"
        },

        { in: '''<>?:"{}|_+''', result: '''<>?:"{}|_+''' },
        { in: "!@#$%^&*()`~", result: "!@#$%^&*()`~"  },
        { in: "Ω≈ç√∫˜µ≤≥÷", result: "ω≈ç√∫˜µ≤≥÷"  },
        { in: "åß∂ƒ©˙∆˚¬…æ", result: "åß∂ƒ©˙∆˚¬…æ"  },
        { in: "œ∑´®†¥¨ˆøπ“‘", result: "œ∑´®†¥¨ˆøπ“‘"  },
        { in: "¡™£¢∞§¶•ªº–≠", result: "¡™£¢∞§¶•ªº–≠"  },
        { in: "¸˛Ç◊ı˜Â¯˘¿", result: "¸˛ç◊ı˜â¯˘¿"  },
        { in: "ÅÍÎÏ˝ÓÔÒÚÆ☃", result: "åíîï˝óôòúæ☃"  },
        { in: "Œ„´‰ˇÁ¨ˆØ∏”’", result: "œ„´‰ˇá¨ˆø∏”’"  },
        { in: "`⁄€‹›ﬁﬂ‡°·‚—±", result: "`⁄€‹›ﬁﬂ‡°·‚—±"  },
        { in: "⅛⅜⅝⅞", result: "⅛⅜⅝⅞"  },
        { in: "٠١٢٣٤٥٦٧٨٩", result: "٠١٢٣٤٥٦٧٨٩"  },
        { in: "田中さんにあげて下さい", result: "田中さんにあげて下さい"  },
        { in: "パーティーへ行かないか", result: "パーティーへ行かないか"  },
        { in: "和製漢語", result: "和製漢語"  },
        { in: "部落格", result: "部落格"  },
        { in: "사회과학원 어학연구소", result: "사회과학원 어학연구소"  },
        { in: "찦차를 타고 온 펲시맨과 쑛다리 똠방각하", result: "찦차를 타고 온 펲시맨과 쑛다리 똠방각하"  },
        { in: "社會科學院語學研究所", result: "社會科學院語學研究所"  },
        { in: "울란바토르", result: "울란바토르"  },
        { in: "𠜎𠜱𠝹𠱓𠱸𠲖𠳏", result: "𠜎𠜱𠝹𠱓𠱸𠲖𠳏"  },
        { in: "Ⱥ", result: "ⱥ"  },
        { in: "Ⱦ", result: "ⱦ"  },

        { in: "ヽ༼ຈل͜ຈ༽ﾉ ヽ༼ຈل͜ຈ༽ﾉ", result: "ヽ༼ຈل͜ຈ༽ﾉ ヽ༼ຈل͜ຈ༽ﾉ" },
        { in: "(｡◕ ∀ ◕｡)", result: "(｡◕ ∀ ◕｡)" },
        { in: "｀ｨ(´∀｀∩", result: "｀ｨ(´∀｀∩" },
        { in: "__ﾛ(,_,*)", result: "__ﾛ(,_,*)" },
        { in: "・(￣∀￣)・:*:", result: "・(￣∀￣)・:*:" },
        { in: "ﾟ･✿ヾ╲(｡◕‿◕｡)╱✿･ﾟ", result: "ﾟ･✿ヾ╲(｡◕‿◕｡)╱✿･ﾟ" },
        { in: ",。・:*:・゜’( ☻ ω ☻ )。・:*:・゜’", result: ",。・:*:・゜’( ☻ ω ☻ )。・:*:・゜’" },
        { in: "(╯°□°）╯︵ ┻━┻)", result: "(╯°□°）╯︵ ┻━┻)" },
        { in: "(ﾉಥ益ಥ）ﾉ﻿ ┻━┻", result: "(ﾉಥ益ಥ）ﾉ﻿ ┻━┻" },
        { in: "┬─┬ノ( º _ ºノ)", result: "┬─┬ノ( º _ ºノ)" },
        { in: "( ͡° ͜ʖ ͡°)", result: "( ͡° ͜ʖ ͡°)" },

        { in: "😍", result: "😍" },
        { in: "👩🏽", result: "👩🏽" },
        { in: "👾 🙇 💁 🙅 🙆 🙋 🙎 🙍", result: "👾 🙇 💁 🙅 🙆 🙋 🙎 🙍" },
        { in: "🐵 🙈 🙉 🙊", result: "🐵 🙈 🙉 🙊" },
        { in: "❤️ 💔 💌 💕 💞 💓 💗 💖 💘 💝 💟 💜 💛 💚 💙", result: "❤️ 💔 💌 💕 💞 💓 💗 💖 💘 💝 💟 💜 💛 💚 💙" },
        { in: "✋🏿 💪🏿 👐🏿 🙌🏿 👏🏿 🙏🏿", result: "✋🏿 💪🏿 👐🏿 🙌🏿 👏🏿 🙏🏿" },
        { in: "🚾 🆒 🆓 🆕 🆖 🆗 🆙 🏧", result: "🚾 🆒 🆓 🆕 🆖 🆗 🆙 🏧" },
        { in: "0️⃣ 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟", result: "0️⃣ 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟" },
        { in: "🇺🇸🇷🇺🇸 🇦🇫🇦🇲🇸", result: "🇺🇸🇷🇺🇸 🇦🇫🇦🇲🇸" },
        { in: "🇺🇸🇷🇺🇸🇦🇫🇦🇲", result: "🇺🇸🇷🇺🇸🇦🇫🇦🇲" },
        { in: "🇺🇸🇷🇺🇸🇦", result: "🇺🇸🇷🇺🇸🇦" },

        { in: "Ｔｈｅ ｑｕｉｃｋ ｂｒｏｗｎ ｆｏｘ ｊｕｍｐｓ ＯＶＥＲ ＴＨＥ ｌａｚｙ ｄｏｇ", result: "ｔｈｅ ｑｕｉｃｋ ｂｒｏｗｎ ｆｏｘ ｊｕｍｐｓ ｏｖｅｒ ｔｈｅ ｌａｚｙ ｄｏｇ" },
    ]
}


// null propagation -----------------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            id: 'lower null and missing propagation',
            statement: "lower(${param})",
            expected: (success null)
        }
    ],
    variable_sets: [
        { param: "null",    },
        { param: "missing", },
    ]
}

// wrong number of arguments --------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            id: 'lower wrong number of arguments',
            statement: "${sql}",
            expected: (error)
        }
    ],
    variable_sets: [
        { sql: "lower()" },
        { sql: "lower('', '')" },
        { sql: "lower('', 1)" },
    ]
}

// wrong type of arguments ----------------------------------------------------------------------------------------
for::{
    template: [
        test::{
            id: 'lower wrong type of arguments',
            statement: "lower(${param})",
            expected: (error)
        }
    ],
    variable_sets: [
        { param: "1" },
        { param: "1.0" },
        { param: "1e0" },
        { param: "`()`" },
        { param: "true" },
        { param: "`[]`" },
        { param: "`{}`" },
    ]
}


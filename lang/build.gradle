import org.partiql.pig.cmdline.Command
import org.partiql.pig.cmdline.TargetLanguage
import org.partiql.pig.errors.PigException

/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License').
 *  You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *      http://aws.amazon.com/apache2.0/
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 *  language governing permissions and limitations under the License.
 */

// Documentation for using Gradle with Kotlin is here: https://kotlinlang.org/docs/reference/using-gradle.html

plugins {
    // https://docs.gradle.org/current/userguide/java_library_plugin.html#header
    id 'java-library'
    // https://docs.gradle.org/5.0/userguide/publishing_maven.html#header
    id 'maven-publish'
    id 'org.jetbrains.dokka' version '1.6.10'
    id 'signing'
    id 'me.champeau.gradle.jmh' version '0.5.3'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation project(":partiql-antlr")
    // run-time dependencies
    // TODO:  don't expose Kotlin stdlib as part of the API.  This is currently needed because parts of the
    // interpreter's API use kotlin.sequences.Sequence<ExprValue>.  Once that has been removed, we can change
    // 'api' below to 'implementation' to effect this.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    
    // ANTLR Runtime for Parser
    implementation 'org.antlr:antlr4-runtime:4.10.1'

    api 'com.amazon.ion:ion-java:1.9.0'
    api 'com.amazon.ion:ion-element:0.2.0'
    api 'org.partiql:partiql-ir-generator-runtime:0.5.0'
    api 'org.partiql:partiql-isl-kotlin:0.1.0'

    implementation 'org.apache.commons:commons-csv:1.8'

    // test-time dependencies
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'pl.pragmatists:JUnitParams:[1.0.0,1.1.0)'
    testImplementation 'org.assertj:assertj-core:[3.11.0,3.12.0)'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
}

// PIG Configuration
def PIG_SOURCE_ROOT = new File(projectDir, "build/generated-src/pig")
def PIG_OUTPUT_DIR = new File(PIG_SOURCE_ROOT, "org/partiql/lang/domains")

task generatePigDomains {
    group = "code generation"

    // TODO: in the future, utilize the API created as part of this ticket:
    // https://github.com/partiql/partiql-ir-generator/issues/5

    def typeUniverse = new File(projectDir, "resources/org/partiql/type-domains/partiql.ion")
    def targetLanguage = new TargetLanguage.Kotlin("org.partiql.lang.domains", PIG_OUTPUT_DIR)
    def cmd = new Command.Generate(typeUniverse , targetLanguage)

    // Tell gradle about the input and output of this task so that it only invokes pig when
    // the input file has changed or the output files are missing.
    inputs.file(typeUniverse)
    outputs.dir(PIG_SOURCE_ROOT)

    doLast {
        // If the old PIG output file is present it will break the build so delete it. This prevents confusion and
        // frustration on the part of PartiQL developers who will otherwise need to know and remember to delete
        // this file after working with an older revision of PartiQL.
        def oldPigOutputFile = new File(projectDir, "src/org/partiql/lang/domains/partiql-domains.kt")
        if(oldPigOutputFile.exists()) {
            oldPigOutputFile.delete()
        }
        try {
            org.partiql.pig.MainKt.generateCode(cmd)
        } catch(PigException e) {
            System.err.println("Failed to generate PIG domains: ${e.error}")
            throw new TaskExecutionException(generatePigDomains, e)
        }
    }
}

sourceSets {
    main {
        kotlin.srcDirs += [PIG_SOURCE_ROOT]
    }
    jmh {
        java.srcDirs = ['src/jmh/java']
        kotlin.srcDirs = ["jmh"]
        resources.srcDirs = ['src/jmh/resources']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

compileKotlin.dependsOn generatePigDomains
runKtlintCheckOverMainSourceSet.dependsOn generatePigDomains

ktlint {
    filter {
        // excluding multiple files from ktlint was somewhat of a challenge using other approaches..
        // We use the "workaround" described here: https://github.com/JLLeitschuh/ktlint-gradle/issues/222
        exclude({it.file.absolutePath.contains("/generated-src/")})
    }
}

tasks.dokkaHtml.configure {
    dependsOn(generatePigDomains)
    outputDirectory.set(file("$buildDir/javadoc"))
    //todo: includes = ["path/to/module.md"]
}

task sourcesJar(type: Jar) {
    from "src"
    classifier = "sources"
}

task javadocJar(type: Jar) {
    from dokkaHtml
    archiveClassifier.set("javadoc")
}

publishing {
    publications {
        maven(MavenPublication) {
            // group id and version are set in the root build.gradle for all projects.
            artifactId = "partiql-lang-kotlin"

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "PartiQL Lang Kotlin"
                packaging = "jar"
                url = "https://partiql.org/"
                description = "An implementation of PartiQL for the JVM written in Kotlin."
                scm {
                    connection = "scm:git@github.com:partiql/partiql-lang-kotlin.git"
                    developerConnection = "scm:git@github.com:partiql/partiql-lang-kotlin.git"
                    url = "git@github.com:partiql/partiql-lang-kotlin.git"
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "PartiQL Team"
                        email = "partiql-team@amazon.com"
                        organization = "PartiQL"
                        organizationUrl = "https://github.com/partiql"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://aws.oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    // Allow publishing to maven local even if we don't have the signing keys
    // This works because when not required, the signing task will be skipped
    // if signing.keyId, signing.password, signing.secretKeyRingFile, etc are
    // not present in gradle.properties.
    required { !gradle.taskGraph.hasTask(":lang:publishToMavenLocal") }

    sign publishing.publications.maven
}
